# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2021, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-10 01:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/downloader-middleware.rst:5
msgid "Downloader Middleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:7
msgid "The downloader middleware is a framework of hooks into Scrapy's request/response processing.  It's a light, low-level system for globally altering Scrapy's requests and responses."
msgstr ""

#: ../../topics/downloader-middleware.rst:14
msgid "Activating a downloader middleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:16
msgid "To activate a downloader middleware component, add it to the :setting:`DOWNLOADER_MIDDLEWARES` setting, which is a dict whose keys are the middleware class paths and their values are the middleware orders."
msgstr ""

#: ../../topics/downloader-middleware.rst:20
msgid "Here's an example::"
msgstr ""

#: ../../topics/downloader-middleware.rst:26
msgid "The :setting:`DOWNLOADER_MIDDLEWARES` setting is merged with the :setting:`DOWNLOADER_MIDDLEWARES_BASE` setting defined in Scrapy (and not meant to be overridden) and then sorted by order to get the final sorted list of enabled middlewares: the first middleware is the one closer to the engine and the last is the one closer to the downloader. In other words, the :meth:`~scrapy.downloadermiddlewares.DownloaderMiddleware.process_request` method of each middleware will be invoked in increasing middleware order (100, 200, 300, ...) and the :meth:`~scrapy.downloadermiddlewares.DownloaderMiddleware.process_response` method of each middleware will be invoked in decreasing order."
msgstr ""

#: ../../topics/downloader-middleware.rst:36
msgid "To decide which order to assign to your middleware see the :setting:`DOWNLOADER_MIDDLEWARES_BASE` setting and pick a value according to where you want to insert the middleware. The order does matter because each middleware performs a different action and your middleware could depend on some previous (or subsequent) middleware being applied."
msgstr ""

#: ../../topics/downloader-middleware.rst:42
msgid "If you want to disable a built-in middleware (the ones defined in :setting:`DOWNLOADER_MIDDLEWARES_BASE` and enabled by default) you must define it in your project's :setting:`DOWNLOADER_MIDDLEWARES` setting and assign ``None`` as its value.  For example, if you want to disable the user-agent middleware::"
msgstr ""

#: ../../topics/downloader-middleware.rst:52
msgid "Finally, keep in mind that some middlewares may need to be enabled through a particular setting. See each middleware documentation for more info."
msgstr ""

#: ../../topics/downloader-middleware.rst:58
msgid "Writing your own downloader middleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:60
msgid "Each downloader middleware is a Python class that defines one or more of the methods defined below."
msgstr ""

#: ../../topics/downloader-middleware.rst:63
msgid "The main entry point is the ``from_crawler`` class method, which receives a :class:`~scrapy.crawler.Crawler` instance. The :class:`~scrapy.crawler.Crawler` object gives you access, for example, to the :ref:`settings <topics-settings>`."
msgstr ""

#: ../../topics/downloader-middleware.rst:71
msgid "Any of the downloader middleware methods may also return a deferred."
msgstr ""

#: ../../topics/downloader-middleware.rst:75
msgid "This method is called for each request that goes through the download middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:78
msgid ":meth:`process_request` should either: return ``None``, return a :class:`~scrapy.http.Response` object, return a :class:`~scrapy.http.Request` object, or raise :exc:`~scrapy.exceptions.IgnoreRequest`."
msgstr ""

#: ../../topics/downloader-middleware.rst:82
msgid "If it returns ``None``, Scrapy will continue processing this request, executing all other middlewares until, finally, the appropriate downloader handler is called the request performed (and its response downloaded)."
msgstr ""

#: ../../topics/downloader-middleware.rst:86
msgid "If it returns a :class:`~scrapy.http.Response` object, Scrapy won't bother calling *any* other :meth:`process_request` or :meth:`process_exception` methods, or the appropriate download function; it'll return that response. The :meth:`process_response` methods of installed middleware is always called on every response."
msgstr ""

#: ../../topics/downloader-middleware.rst:91
msgid "If it returns a :class:`~scrapy.http.Request` object, Scrapy will stop calling process_request methods and reschedule the returned request. Once the newly returned request is performed, the appropriate middleware chain will be called on the downloaded response."
msgstr ""

#: ../../topics/downloader-middleware.rst:96
msgid "If it raises an :exc:`~scrapy.exceptions.IgnoreRequest` exception, the :meth:`process_exception` methods of installed downloader middleware will be called. If none of them handle the exception, the errback function of the request (``Request.errback``) is called. If no code handles the raised exception, it is ignored and not logged (unlike other exceptions)."
msgstr ""

#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../topics/downloader-middleware.rst:0
#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.allowed:0
#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.from_crawler:0
msgid "Parameters"
msgstr ""

#: ../../topics/downloader-middleware.rst:102
msgid "the request being processed"
msgstr ""

#: ../../topics/downloader-middleware.rst:105
#: ../../topics/downloader-middleware.rst:163
msgid "the spider for which this request is intended"
msgstr ""

#: ../../topics/downloader-middleware.rst:110
msgid ":meth:`process_response` should either: return a :class:`~scrapy.http.Response` object, return a :class:`~scrapy.http.Request` object or raise a :exc:`~scrapy.exceptions.IgnoreRequest` exception."
msgstr ""

#: ../../topics/downloader-middleware.rst:114
msgid "If it returns a :class:`~scrapy.http.Response` (it could be the same given response, or a brand-new one), that response will continue to be processed with the :meth:`process_response` of the next middleware in the chain."
msgstr ""

#: ../../topics/downloader-middleware.rst:118
msgid "If it returns a :class:`~scrapy.http.Request` object, the middleware chain is halted and the returned request is rescheduled to be downloaded in the future. This is the same behavior as if a request is returned from :meth:`process_request`."
msgstr ""

#: ../../topics/downloader-middleware.rst:122
msgid "If it raises an :exc:`~scrapy.exceptions.IgnoreRequest` exception, the errback function of the request (``Request.errback``) is called. If no code handles the raised exception, it is ignored and not logged (unlike other exceptions)."
msgstr ""

#: ../../topics/downloader-middleware.rst:126
msgid "the request that originated the response"
msgstr ""

#: ../../topics/downloader-middleware.rst:129
msgid "the response being processed"
msgstr ""

#: ../../topics/downloader-middleware.rst:132
msgid "the spider for which this response is intended"
msgstr ""

#: ../../topics/downloader-middleware.rst:137
msgid "Scrapy calls :meth:`process_exception` when a download handler or a :meth:`process_request` (from a downloader middleware) raises an exception (including an :exc:`~scrapy.exceptions.IgnoreRequest` exception)"
msgstr ""

#: ../../topics/downloader-middleware.rst:141
msgid ":meth:`process_exception` should return: either ``None``, a :class:`~scrapy.http.Response` object, or a :class:`~scrapy.http.Request` object."
msgstr ""

#: ../../topics/downloader-middleware.rst:144
msgid "If it returns ``None``, Scrapy will continue processing this exception, executing any other :meth:`process_exception` methods of installed middleware, until no middleware is left and the default exception handling kicks in."
msgstr ""

#: ../../topics/downloader-middleware.rst:148
msgid "If it returns a :class:`~scrapy.http.Response` object, the :meth:`process_response` method chain of installed middleware is started, and Scrapy won't bother calling any other :meth:`process_exception` methods of middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:152
msgid "If it returns a :class:`~scrapy.http.Request` object, the returned request is rescheduled to be downloaded in the future. This stops the execution of :meth:`process_exception` methods of the middleware the same as returning a response would."
msgstr ""

#: ../../topics/downloader-middleware.rst:157
msgid "the request that generated the exception"
msgstr ""

#: ../../topics/downloader-middleware.rst:160
msgid "the raised exception"
msgstr ""

#: ../../topics/downloader-middleware.rst:168
msgid "If present, this classmethod is called to create a middleware instance from a :class:`~scrapy.crawler.Crawler`. It must return a new instance of the middleware. Crawler object provides access to all Scrapy core components like settings and signals; it is a way for middleware to access them and hook its functionality into Scrapy."
msgstr ""

#: ../../topics/downloader-middleware.rst:174
msgid "crawler that uses this middleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:180
msgid "Built-in downloader middleware reference"
msgstr ""

#: ../../topics/downloader-middleware.rst:182
msgid "This page describes all downloader middleware components that come with Scrapy. For information on how to use them and how to write your own downloader middleware, see the :ref:`downloader middleware usage guide <topics-downloader-middleware>`."
msgstr ""

#: ../../topics/downloader-middleware.rst:187
msgid "For a list of the components enabled by default (and their orders) see the :setting:`DOWNLOADER_MIDDLEWARES_BASE` setting."
msgstr ""

#: ../../topics/downloader-middleware.rst:193
msgid "CookiesMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:200
msgid "This middleware enables working with sites that require cookies, such as those that use sessions. It keeps track of cookies sent by web servers, and sends them back on subsequent requests (from that spider), just like web browsers do."
msgstr ""

#: ../../topics/downloader-middleware.rst:205
msgid "When non-UTF8 encoded byte sequences are passed to a :class:`~scrapy.http.Request`, the ``CookiesMiddleware`` will log a warning. Refer to :ref:`topics-logging-advanced-customization` to customize the logging behaviour."
msgstr ""

#: ../../topics/downloader-middleware.rst:210
msgid "Cookies set via the ``Cookie`` header are not considered by the :ref:`cookies-mw`. If you need to set cookies for a request, use the :class:`Request.cookies <scrapy.http.Request>` parameter. This is a known current limitation that is being worked on."
msgstr ""

#: ../../topics/downloader-middleware.rst:215
msgid "The following settings can be used to configure the cookie middleware:"
msgstr ""

#: ../../topics/downloader-middleware.rst:217
msgid ":setting:`COOKIES_ENABLED`"
msgstr ""

#: ../../topics/downloader-middleware.rst:218
msgid ":setting:`COOKIES_DEBUG`"
msgstr ""

#: ../../topics/downloader-middleware.rst:223
msgid "Multiple cookie sessions per spider"
msgstr ""

#: ../../topics/downloader-middleware.rst:225
msgid "There is support for keeping multiple cookie sessions per spider by using the :reqmeta:`cookiejar` Request meta key. By default it uses a single cookie jar (session), but you can pass an identifier to use different ones."
msgstr ""

#: ../../topics/downloader-middleware.rst:229
msgid "For example::"
msgstr ""

#: ../../topics/downloader-middleware.rst:235
msgid "Keep in mind that the :reqmeta:`cookiejar` meta key is not \"sticky\". You need to keep passing it along on subsequent requests. For example::"
msgstr ""

#: ../../topics/downloader-middleware.rst:247
msgid "COOKIES_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:249
#: ../../topics/downloader-middleware.rst:709
#: ../../topics/downloader-middleware.rst:800
#: ../../topics/downloader-middleware.rst:841
#: ../../topics/downloader-middleware.rst:908
#: ../../topics/downloader-middleware.rst:1187
msgid "Default: ``True``"
msgstr ""

#: ../../topics/downloader-middleware.rst:251
msgid "Whether to enable the cookies middleware. If disabled, no cookies will be sent to web servers."
msgstr ""

#: ../../topics/downloader-middleware.rst:254
msgid "Notice that despite the value of :setting:`COOKIES_ENABLED` setting if ``Request.``:reqmeta:`meta['dont_merge_cookies'] <dont_merge_cookies>` evaluates to ``True`` the request cookies will **not** be sent to the web server and received cookies in :class:`~scrapy.http.Response` will **not** be merged with the existing cookies."
msgstr ""

#: ../../topics/downloader-middleware.rst:260
msgid "For more detailed information see the ``cookies`` parameter in :class:`~scrapy.http.Request`."
msgstr ""

#: ../../topics/downloader-middleware.rst:266
msgid "COOKIES_DEBUG"
msgstr ""

#: ../../topics/downloader-middleware.rst:268
#: ../../topics/downloader-middleware.rst:553
#: ../../topics/downloader-middleware.rst:594
#: ../../topics/downloader-middleware.rst:640
#: ../../topics/downloader-middleware.rst:650
#: ../../topics/downloader-middleware.rst:1173
msgid "Default: ``False``"
msgstr ""

#: ../../topics/downloader-middleware.rst:270
msgid "If enabled, Scrapy will log all cookies sent in requests (i.e. ``Cookie`` header) and all cookies received in responses (i.e. ``Set-Cookie`` header)."
msgstr ""

#: ../../topics/downloader-middleware.rst:273
msgid "Here's an example of a log with :setting:`COOKIES_DEBUG` enabled::"
msgstr ""

#: ../../topics/downloader-middleware.rst:287
msgid "DefaultHeadersMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:294
msgid "This middleware sets all default requests headers specified in the :setting:`DEFAULT_REQUEST_HEADERS` setting."
msgstr ""

#: ../../topics/downloader-middleware.rst:298
msgid "DownloadTimeoutMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:305
msgid "This middleware sets the download timeout for requests specified in the :setting:`DOWNLOAD_TIMEOUT` setting or :attr:`download_timeout` spider attribute."
msgstr ""

#: ../../topics/downloader-middleware.rst:311
msgid "You can also set download timeout per-request using :reqmeta:`download_timeout` Request.meta key; this is supported even when DownloadTimeoutMiddleware is disabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:316
msgid "HttpAuthMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:323
msgid "This middleware authenticates all requests generated from certain spiders using `Basic access authentication`_ (aka. HTTP auth)."
msgstr ""

#: ../../topics/downloader-middleware.rst:326
msgid "To enable HTTP authentication from certain spiders, set the ``http_user`` and ``http_pass`` attributes of those spiders."
msgstr ""

#: ../../topics/downloader-middleware.rst:329
msgid "Example::"
msgstr ""

#: ../../topics/downloader-middleware.rst:345
msgid "HttpCacheMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:352
msgid "This middleware provides low-level cache to all HTTP requests and responses. It has to be combined with a cache storage backend as well as a cache policy."
msgstr ""

#: ../../topics/downloader-middleware.rst:355
msgid "Scrapy ships with three HTTP cache storage backends:"
msgstr ""

#: ../../topics/downloader-middleware.rst:357
msgid ":ref:`httpcache-storage-fs`"
msgstr ""

#: ../../topics/downloader-middleware.rst:358
msgid ":ref:`httpcache-storage-dbm`"
msgstr ""

#: ../../topics/downloader-middleware.rst:360
msgid "You can change the HTTP cache storage backend with the :setting:`HTTPCACHE_STORAGE` setting. Or you can also :ref:`implement your own storage backend. <httpcache-storage-custom>`"
msgstr ""

#: ../../topics/downloader-middleware.rst:363
msgid "Scrapy ships with two HTTP cache policies:"
msgstr ""

#: ../../topics/downloader-middleware.rst:365
msgid ":ref:`httpcache-policy-rfc2616`"
msgstr ""

#: ../../topics/downloader-middleware.rst:366
msgid ":ref:`httpcache-policy-dummy`"
msgstr ""

#: ../../topics/downloader-middleware.rst:368
msgid "You can change the HTTP cache policy with the :setting:`HTTPCACHE_POLICY` setting. Or you can also implement your own policy."
msgstr ""

#: ../../topics/downloader-middleware.rst:373
msgid "You can also avoid caching a response on every policy using :reqmeta:`dont_cache` meta key equals ``True``."
msgstr ""

#: ../../topics/downloader-middleware.rst:381
msgid "Dummy policy (default)"
msgstr ""

#: ../../topics/downloader-middleware.rst:385
msgid "This policy has no awareness of any HTTP Cache-Control directives. Every request and its corresponding response are cached.  When the same request is seen again, the response is returned without transferring anything from the Internet."
msgstr ""

#: ../../topics/downloader-middleware.rst:390
msgid "The Dummy policy is useful for testing spiders faster (without having to wait for downloads every time) and for trying your spider offline, when an Internet connection is not available. The goal is to be able to \"replay\" a spider run *exactly as it ran before*."
msgstr ""

#: ../../topics/downloader-middleware.rst:399
msgid "RFC2616 policy"
msgstr ""

#: ../../topics/downloader-middleware.rst:403
msgid "This policy provides a RFC2616 compliant HTTP cache, i.e. with HTTP Cache-Control awareness, aimed at production and used in continuous runs to avoid downloading unmodified data (to save bandwidth and speed up crawls)."
msgstr ""

#: ../../topics/downloader-middleware.rst:408
msgid "What is implemented:"
msgstr ""

#: ../../topics/downloader-middleware.rst:410
msgid "Do not attempt to store responses/requests with ``no-store`` cache-control directive set"
msgstr ""

#: ../../topics/downloader-middleware.rst:411
msgid "Do not serve responses from cache if ``no-cache`` cache-control directive is set even for fresh responses"
msgstr ""

#: ../../topics/downloader-middleware.rst:412
msgid "Compute freshness lifetime from ``max-age`` cache-control directive"
msgstr ""

#: ../../topics/downloader-middleware.rst:413
msgid "Compute freshness lifetime from ``Expires`` response header"
msgstr ""

#: ../../topics/downloader-middleware.rst:414
msgid "Compute freshness lifetime from ``Last-Modified`` response header (heuristic used by Firefox)"
msgstr ""

#: ../../topics/downloader-middleware.rst:415
msgid "Compute current age from ``Age`` response header"
msgstr ""

#: ../../topics/downloader-middleware.rst:416
msgid "Compute current age from ``Date`` header"
msgstr ""

#: ../../topics/downloader-middleware.rst:417
msgid "Revalidate stale responses based on ``Last-Modified`` response header"
msgstr ""

#: ../../topics/downloader-middleware.rst:418
msgid "Revalidate stale responses based on ``ETag`` response header"
msgstr ""

#: ../../topics/downloader-middleware.rst:419
msgid "Set ``Date`` header for any received response missing it"
msgstr ""

#: ../../topics/downloader-middleware.rst:420
msgid "Support ``max-stale`` cache-control directive in requests"
msgstr ""

#: ../../topics/downloader-middleware.rst:422
msgid "This allows spiders to be configured with the full RFC2616 cache policy, but avoid revalidation on a request-by-request basis, while remaining conformant with the HTTP spec."
msgstr ""

#: ../../topics/downloader-middleware.rst:426
msgid "Example:"
msgstr ""

#: ../../topics/downloader-middleware.rst:428
msgid "Add ``Cache-Control: max-stale=600`` to Request headers to accept responses that have exceeded their expiration time by no more than 600 seconds."
msgstr ""

#: ../../topics/downloader-middleware.rst:431
msgid "See also: RFC2616, 14.9.3"
msgstr ""

#: ../../topics/downloader-middleware.rst:433
msgid "What is missing:"
msgstr ""

#: ../../topics/downloader-middleware.rst:435
msgid "``Pragma: no-cache`` support https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1"
msgstr ""

#: ../../topics/downloader-middleware.rst:436
msgid "``Vary`` header support https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.6"
msgstr ""

#: ../../topics/downloader-middleware.rst:437
msgid "Invalidation after updates or deletes https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.10"
msgstr ""

#: ../../topics/downloader-middleware.rst:438
msgid "... probably others .."
msgstr ""

#: ../../topics/downloader-middleware.rst:444
msgid "Filesystem storage backend (default)"
msgstr ""

#: ../../topics/downloader-middleware.rst:448
msgid "File system storage backend is available for the HTTP cache middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:450
msgid "Each request/response pair is stored in a different directory containing the following files:"
msgstr ""

#: ../../topics/downloader-middleware.rst:453
msgid "``request_body`` - the plain request body"
msgstr ""

#: ../../topics/downloader-middleware.rst:455
msgid "``request_headers`` - the request headers (in raw HTTP format)"
msgstr ""

#: ../../topics/downloader-middleware.rst:457
msgid "``response_body`` - the plain response body"
msgstr ""

#: ../../topics/downloader-middleware.rst:459
msgid "``response_headers`` - the request headers (in raw HTTP format)"
msgstr ""

#: ../../topics/downloader-middleware.rst:461
msgid "``meta`` - some metadata of this cache resource in Python ``repr()`` format (grep-friendly format)"
msgstr ""

#: ../../topics/downloader-middleware.rst:464
msgid "``pickled_meta`` - the same metadata in ``meta`` but pickled for more efficient deserialization"
msgstr ""

#: ../../topics/downloader-middleware.rst:467
msgid "The directory name is made from the request fingerprint (see ``scrapy.utils.request.fingerprint``), and one level of subdirectories is used to avoid creating too many files into the same directory (which is inefficient in many file systems). An example directory could be::"
msgstr ""

#: ../../topics/downloader-middleware.rst:477
msgid "DBM storage backend"
msgstr ""

#: ../../topics/downloader-middleware.rst:481
msgid "A DBM_ storage backend is also available for the HTTP cache middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:483
msgid "By default, it uses the :mod:`dbm`, but you can change it with the :setting:`HTTPCACHE_DBM_MODULE` setting."
msgstr ""

#: ../../topics/downloader-middleware.rst:489
msgid "Writing your own storage backend"
msgstr ""

#: ../../topics/downloader-middleware.rst:491
msgid "You can implement a cache storage backend by creating a Python class that defines the methods described below."
msgstr ""

#: ../../topics/downloader-middleware.rst:500
msgid "This method gets called after a spider has been opened for crawling. It handles the :signal:`open_spider <spider_opened>` signal."
msgstr ""

#: ../../topics/downloader-middleware.rst:503
msgid "the spider which has been opened"
msgstr ""

#: ../../topics/downloader-middleware.rst:508
msgid "This method gets called after a spider has been closed. It handles the :signal:`close_spider <spider_closed>` signal."
msgstr ""

#: ../../topics/downloader-middleware.rst:511
msgid "the spider which has been closed"
msgstr ""

#: ../../topics/downloader-middleware.rst:516
msgid "Return response if present in cache, or ``None`` otherwise."
msgstr ""

#: ../../topics/downloader-middleware.rst:518
msgid "the spider which generated the request"
msgstr ""

#: ../../topics/downloader-middleware.rst:521
msgid "the request to find cached response for"
msgstr ""

#: ../../topics/downloader-middleware.rst:526
msgid "Store the given response in the cache."
msgstr ""

#: ../../topics/downloader-middleware.rst:528
msgid "the spider for which the response is intended"
msgstr ""

#: ../../topics/downloader-middleware.rst:531
msgid "the corresponding request the spider generated"
msgstr ""

#: ../../topics/downloader-middleware.rst:534
msgid "the response to store in the cache"
msgstr ""

#: ../../topics/downloader-middleware.rst:537
msgid "In order to use your storage backend, set:"
msgstr ""

#: ../../topics/downloader-middleware.rst:539
msgid ":setting:`HTTPCACHE_STORAGE` to the Python import path of your custom storage class."
msgstr ""

#: ../../topics/downloader-middleware.rst:543
msgid "HTTPCache middleware settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:545
msgid "The :class:`HttpCacheMiddleware` can be configured through the following settings:"
msgstr ""

#: ../../topics/downloader-middleware.rst:551
msgid "HTTPCACHE_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:555
msgid "Whether the HTTP cache will be enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:560
msgid "HTTPCACHE_EXPIRATION_SECS"
msgstr ""

#: ../../topics/downloader-middleware.rst:562
msgid "Default: ``0``"
msgstr ""

#: ../../topics/downloader-middleware.rst:564
msgid "Expiration time for cached requests, in seconds."
msgstr ""

#: ../../topics/downloader-middleware.rst:566
msgid "Cached requests older than this time will be re-downloaded. If zero, cached requests will never expire."
msgstr ""

#: ../../topics/downloader-middleware.rst:572
msgid "HTTPCACHE_DIR"
msgstr ""

#: ../../topics/downloader-middleware.rst:574
msgid "Default: ``'httpcache'``"
msgstr ""

#: ../../topics/downloader-middleware.rst:576
msgid "The directory to use for storing the (low-level) HTTP cache. If empty, the HTTP cache will be disabled. If a relative path is given, is taken relative to the project data dir. For more info see: :ref:`topics-project-structure`."
msgstr ""

#: ../../topics/downloader-middleware.rst:583
msgid "HTTPCACHE_IGNORE_HTTP_CODES"
msgstr ""

#: ../../topics/downloader-middleware.rst:585
#: ../../topics/downloader-middleware.rst:668
#: ../../topics/downloader-middleware.rst:850
msgid "Default: ``[]``"
msgstr ""

#: ../../topics/downloader-middleware.rst:587
msgid "Don't cache response with these HTTP codes."
msgstr ""

#: ../../topics/downloader-middleware.rst:592
msgid "HTTPCACHE_IGNORE_MISSING"
msgstr ""

#: ../../topics/downloader-middleware.rst:596
msgid "If enabled, requests not found in the cache will be ignored instead of downloaded."
msgstr ""

#: ../../topics/downloader-middleware.rst:601
msgid "HTTPCACHE_IGNORE_SCHEMES"
msgstr ""

#: ../../topics/downloader-middleware.rst:603
msgid "Default: ``['file']``"
msgstr ""

#: ../../topics/downloader-middleware.rst:605
msgid "Don't cache responses with these URI schemes."
msgstr ""

#: ../../topics/downloader-middleware.rst:610
msgid "HTTPCACHE_STORAGE"
msgstr ""

#: ../../topics/downloader-middleware.rst:612
msgid "Default: ``'scrapy.extensions.httpcache.FilesystemCacheStorage'``"
msgstr ""

#: ../../topics/downloader-middleware.rst:614
msgid "The class which implements the cache storage backend."
msgstr ""

#: ../../topics/downloader-middleware.rst:619
msgid "HTTPCACHE_DBM_MODULE"
msgstr ""

#: ../../topics/downloader-middleware.rst:621
msgid "Default: ``'dbm'``"
msgstr ""

#: ../../topics/downloader-middleware.rst:623
msgid "The database module to use in the :ref:`DBM storage backend <httpcache-storage-dbm>`. This setting is specific to the DBM backend."
msgstr ""

#: ../../topics/downloader-middleware.rst:629
msgid "HTTPCACHE_POLICY"
msgstr ""

#: ../../topics/downloader-middleware.rst:631
msgid "Default: ``'scrapy.extensions.httpcache.DummyPolicy'``"
msgstr ""

#: ../../topics/downloader-middleware.rst:633
msgid "The class which implements the cache policy."
msgstr ""

#: ../../topics/downloader-middleware.rst:638
msgid "HTTPCACHE_GZIP"
msgstr ""

#: ../../topics/downloader-middleware.rst:642
msgid "If enabled, will compress all cached data with gzip. This setting is specific to the Filesystem backend."
msgstr ""

#: ../../topics/downloader-middleware.rst:648
msgid "HTTPCACHE_ALWAYS_STORE"
msgstr ""

#: ../../topics/downloader-middleware.rst:652
msgid "If enabled, will cache pages unconditionally."
msgstr ""

#: ../../topics/downloader-middleware.rst:654
msgid "A spider may wish to have all responses available in the cache, for future use with ``Cache-Control: max-stale``, for instance. The DummyPolicy caches all responses but never revalidates them, and sometimes a more nuanced policy is desirable."
msgstr ""

#: ../../topics/downloader-middleware.rst:659
msgid "This setting still respects ``Cache-Control: no-store`` directives in responses. If you don't want that, filter ``no-store`` out of the Cache-Control headers in responses you feed to the cache middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:666
msgid "HTTPCACHE_IGNORE_RESPONSE_CACHE_CONTROLS"
msgstr ""

#: ../../topics/downloader-middleware.rst:670
msgid "List of Cache-Control directives in responses to be ignored."
msgstr ""

#: ../../topics/downloader-middleware.rst:672
msgid "Sites often set \"no-store\", \"no-cache\", \"must-revalidate\", etc., but get upset at the traffic a spider can generate if it actually respects those directives. This allows to selectively ignore Cache-Control directives that are known to be unimportant for the sites being crawled."
msgstr ""

#: ../../topics/downloader-middleware.rst:677
msgid "We assume that the spider will not issue Cache-Control directives in requests unless it actually needs them, so directives in requests are not filtered."
msgstr ""

#: ../../topics/downloader-middleware.rst:682
msgid "HttpCompressionMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:689
msgid "This middleware allows compressed (gzip, deflate) traffic to be sent/received from web sites."
msgstr ""

#: ../../topics/downloader-middleware.rst:692
msgid "This middleware also supports decoding `brotli-compressed`_ as well as `zstd-compressed`_ responses, provided that `brotlipy`_ or `zstandard`_ is installed, respectively."
msgstr ""

#: ../../topics/downloader-middleware.rst:702
msgid "HttpCompressionMiddleware Settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:707
msgid "COMPRESSION_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:711
msgid "Whether the Compression middleware will be enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:715
msgid "HttpProxyMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:724
msgid "This middleware sets the HTTP proxy to use for requests, by setting the ``proxy`` meta value for :class:`~scrapy.http.Request` objects."
msgstr ""

#: ../../topics/downloader-middleware.rst:727
msgid "Like the Python standard library module :mod:`urllib.request`, it obeys the following environment variables:"
msgstr ""

#: ../../topics/downloader-middleware.rst:730
msgid "``http_proxy``"
msgstr ""

#: ../../topics/downloader-middleware.rst:731
msgid "``https_proxy``"
msgstr ""

#: ../../topics/downloader-middleware.rst:732
msgid "``no_proxy``"
msgstr ""

#: ../../topics/downloader-middleware.rst:734
msgid "You can also set the meta key ``proxy`` per-request, to a value like ``http://some_proxy_server:port`` or ``http://username:password@some_proxy_server:port``. Keep in mind this value will take precedence over ``http_proxy``/``https_proxy`` environment variables, and it will also ignore ``no_proxy`` environment variable."
msgstr ""

#: ../../topics/downloader-middleware.rst:740
msgid "RedirectMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:747
msgid "This middleware handles redirection of requests based on response status."
msgstr ""

#: ../../topics/downloader-middleware.rst:751
msgid "The urls which the request goes through (while being redirected) can be found in the ``redirect_urls`` :attr:`Request.meta <scrapy.http.Request.meta>` key."
msgstr ""

#: ../../topics/downloader-middleware.rst:756
msgid "The reason behind each redirect in :reqmeta:`redirect_urls` can be found in the ``redirect_reasons`` :attr:`Request.meta <scrapy.http.Request.meta>` key. For example: ``[301, 302, 307, 'meta refresh']``."
msgstr ""

#: ../../topics/downloader-middleware.rst:760
msgid "The format of a reason depends on the middleware that handled the corresponding redirect. For example, :class:`RedirectMiddleware` indicates the triggering response status code as an integer, while :class:`MetaRefreshMiddleware` always uses the ``'meta refresh'`` string as reason."
msgstr ""

#: ../../topics/downloader-middleware.rst:765
msgid "The :class:`RedirectMiddleware` can be configured through the following settings (see the settings documentation for more info):"
msgstr ""

#: ../../topics/downloader-middleware.rst:768
msgid ":setting:`REDIRECT_ENABLED`"
msgstr ""

#: ../../topics/downloader-middleware.rst:769
msgid ":setting:`REDIRECT_MAX_TIMES`"
msgstr ""

#: ../../topics/downloader-middleware.rst:773
msgid "If :attr:`Request.meta <scrapy.http.Request.meta>` has ``dont_redirect`` key set to True, the request will be ignored by this middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:776
msgid "If you want to handle some redirect status codes in your spider, you can specify these in the ``handle_httpstatus_list`` spider attribute."
msgstr ""

#: ../../topics/downloader-middleware.rst:779
msgid "For example, if you want the redirect middleware to ignore 301 and 302 responses (and pass them through to your spider) you can do this::"
msgstr ""

#: ../../topics/downloader-middleware.rst:785
msgid "The ``handle_httpstatus_list`` key of :attr:`Request.meta <scrapy.http.Request.meta>` can also be used to specify which response codes to allow on a per-request basis. You can also set the meta key ``handle_httpstatus_all`` to ``True`` if you want to allow any response code for a request."
msgstr ""

#: ../../topics/downloader-middleware.rst:793
msgid "RedirectMiddleware settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:798
msgid "REDIRECT_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:802
msgid "Whether the Redirect middleware will be enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:807
msgid "REDIRECT_MAX_TIMES"
msgstr ""

#: ../../topics/downloader-middleware.rst:809
msgid "Default: ``20``"
msgstr ""

#: ../../topics/downloader-middleware.rst:811
msgid "The maximum number of redirections that will be followed for a single request. After this maximum, the request's response is returned as is."
msgstr ""

#: ../../topics/downloader-middleware.rst:815
msgid "MetaRefreshMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:819
msgid "This middleware handles redirection of requests based on meta-refresh html tag."
msgstr ""

#: ../../topics/downloader-middleware.rst:821
msgid "The :class:`MetaRefreshMiddleware` can be configured through the following settings (see the settings documentation for more info):"
msgstr ""

#: ../../topics/downloader-middleware.rst:824
msgid ":setting:`METAREFRESH_ENABLED`"
msgstr ""

#: ../../topics/downloader-middleware.rst:825
msgid ":setting:`METAREFRESH_IGNORE_TAGS`"
msgstr ""

#: ../../topics/downloader-middleware.rst:826
msgid ":setting:`METAREFRESH_MAXDELAY`"
msgstr ""

#: ../../topics/downloader-middleware.rst:828
msgid "This middleware obey :setting:`REDIRECT_MAX_TIMES` setting, :reqmeta:`dont_redirect`, :reqmeta:`redirect_urls` and :reqmeta:`redirect_reasons` request meta keys as described for :class:`RedirectMiddleware`"
msgstr ""

#: ../../topics/downloader-middleware.rst:834
msgid "MetaRefreshMiddleware settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:839
msgid "METAREFRESH_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:843
msgid "Whether the Meta Refresh middleware will be enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:848
msgid "METAREFRESH_IGNORE_TAGS"
msgstr ""

#: ../../topics/downloader-middleware.rst:852
msgid "Meta tags within these tags are ignored."
msgstr ""

#: ../../topics/downloader-middleware.rst:854
msgid "The default value of :setting:`METAREFRESH_IGNORE_TAGS` changed from ``['script', 'noscript']`` to ``[]``."
msgstr ""

#: ../../topics/downloader-middleware.rst:861
msgid "METAREFRESH_MAXDELAY"
msgstr ""

#: ../../topics/downloader-middleware.rst:863
msgid "Default: ``100``"
msgstr ""

#: ../../topics/downloader-middleware.rst:865
msgid "The maximum meta-refresh delay (in seconds) to follow the redirection. Some sites use meta-refresh for redirecting to a session expired page, so we restrict automatic redirection to the maximum delay."
msgstr ""

#: ../../topics/downloader-middleware.rst:870
msgid "RetryMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:877
msgid "A middleware to retry failed requests that are potentially caused by temporary problems such as a connection timeout or HTTP 500 error."
msgstr ""

#: ../../topics/downloader-middleware.rst:880
msgid "Failed pages are collected on the scraping process and rescheduled at the end, once the spider has finished crawling all regular (non failed) pages."
msgstr ""

#: ../../topics/downloader-middleware.rst:883
msgid "The :class:`RetryMiddleware` can be configured through the following settings (see the settings documentation for more info):"
msgstr ""

#: ../../topics/downloader-middleware.rst:886
msgid ":setting:`RETRY_ENABLED`"
msgstr ""

#: ../../topics/downloader-middleware.rst:887
msgid ":setting:`RETRY_TIMES`"
msgstr ""

#: ../../topics/downloader-middleware.rst:888
msgid ":setting:`RETRY_HTTP_CODES`"
msgstr ""

#: ../../topics/downloader-middleware.rst:892
msgid "If :attr:`Request.meta <scrapy.http.Request.meta>` has ``dont_retry`` key set to True, the request will be ignored by this middleware."
msgstr ""

#: ../../topics/downloader-middleware.rst:895
msgid "To retry requests from a spider callback, you can use the :func:`get_retry_request` function:"
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:1
msgid "Returns a new :class:`~scrapy.Request` object to retry the specified request, or ``None`` if retries of the specified request have been exhausted."
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:5
msgid "For example, in a :class:`~scrapy.Spider` callback, you could use it as follows::"
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:17
msgid "*spider* is the :class:`~scrapy.Spider` instance which is asking for the retry request. It is used to access the :ref:`settings <topics-settings>` and :ref:`stats <topics-stats>`, and to provide extra logging context (see :func:`logging.debug`)."
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:22
msgid "*reason* is a string or an :class:`Exception` object that indicates the reason why the request needs to be retried. It is used to name retry stats."
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:25
msgid "*max_retry_times* is a number that determines the maximum number of times that *request* can be retried. If not specified or ``None``, the number is read from the :reqmeta:`max_retry_times` meta key of the request. If the :reqmeta:`max_retry_times` meta key is not defined or ``None``, the number is read from the :setting:`RETRY_TIMES` setting."
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:31
msgid "*priority_adjust* is a number that determines how the priority of the new request changes in relation to *request*. If not specified, the number is read from the :setting:`RETRY_PRIORITY_ADJUST` setting."
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:35
msgid "*logger* is the logging.Logger object to be used when logging messages"
msgstr ""

#: ../../../scrapy/downloadermiddlewares/retry.py:docstring of scrapy.downloadermiddlewares.retry.get_retry_request:37
msgid "*stats_base_key* is a string to be used as the base key for the retry-related job stats"
msgstr ""

#: ../../topics/downloader-middleware.rst:901
msgid "RetryMiddleware Settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:906
msgid "RETRY_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:910
msgid "Whether the Retry middleware will be enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:915
msgid "RETRY_TIMES"
msgstr ""

#: ../../topics/downloader-middleware.rst:917
msgid "Default: ``2``"
msgstr ""

#: ../../topics/downloader-middleware.rst:919
msgid "Maximum number of times to retry, in addition to the first download."
msgstr ""

#: ../../topics/downloader-middleware.rst:921
msgid "Maximum number of retries can also be specified per-request using :reqmeta:`max_retry_times` attribute of :attr:`Request.meta <scrapy.http.Request.meta>`. When initialized, the :reqmeta:`max_retry_times` meta key takes higher precedence over the :setting:`RETRY_TIMES` setting."
msgstr ""

#: ../../topics/downloader-middleware.rst:929
msgid "RETRY_HTTP_CODES"
msgstr ""

#: ../../topics/downloader-middleware.rst:931
msgid "Default: ``[500, 502, 503, 504, 522, 524, 408, 429]``"
msgstr ""

#: ../../topics/downloader-middleware.rst:933
msgid "Which HTTP response codes to retry. Other errors (DNS lookup issues, connections lost, etc) are always retried."
msgstr ""

#: ../../topics/downloader-middleware.rst:936
msgid "In some cases you may want to add 400 to :setting:`RETRY_HTTP_CODES` because it is a common code used to indicate server overload. It is not included by default because HTTP specs say so."
msgstr ""

#: ../../topics/downloader-middleware.rst:943
msgid "RETRY_PRIORITY_ADJUST"
msgstr ""

#: ../../topics/downloader-middleware.rst:945
msgid "Default: ``-1``"
msgstr ""

#: ../../topics/downloader-middleware.rst:947
msgid "Adjust retry request priority relative to original request:"
msgstr ""

#: ../../topics/downloader-middleware.rst:949
msgid "a positive priority adjust means higher priority."
msgstr ""

#: ../../topics/downloader-middleware.rst:950
msgid "**a negative priority adjust (default) means lower priority.**"
msgstr ""

#: ../../topics/downloader-middleware.rst:956
msgid "RobotsTxtMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:963
msgid "This middleware filters out requests forbidden by the robots.txt exclusion standard."
msgstr ""

#: ../../topics/downloader-middleware.rst:966
msgid "To make sure Scrapy respects robots.txt make sure the middleware is enabled and the :setting:`ROBOTSTXT_OBEY` setting is enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:969
msgid "The :setting:`ROBOTSTXT_USER_AGENT` setting can be used to specify the user agent string to use for matching in the robots.txt_ file. If it is ``None``, the User-Agent header you are sending with the request or the :setting:`USER_AGENT` setting (in that order) will be used for determining the user agent to use in the robots.txt_ file."
msgstr ""

#: ../../topics/downloader-middleware.rst:975
msgid "This middleware has to be combined with a robots.txt_ parser."
msgstr ""

#: ../../topics/downloader-middleware.rst:977
msgid "Scrapy ships with support for the following robots.txt_ parsers:"
msgstr ""

#: ../../topics/downloader-middleware.rst:979
msgid ":ref:`Protego <protego-parser>` (default)"
msgstr ""

#: ../../topics/downloader-middleware.rst:980
msgid ":ref:`RobotFileParser <python-robotfileparser>`"
msgstr ""

#: ../../topics/downloader-middleware.rst:981
msgid ":ref:`Reppy <reppy-parser>`"
msgstr ""

#: ../../topics/downloader-middleware.rst:982
msgid ":ref:`Robotexclusionrulesparser <rerp-parser>`"
msgstr ""

#: ../../topics/downloader-middleware.rst:984
msgid "You can change the robots.txt_ parser with the :setting:`ROBOTSTXT_PARSER` setting. Or you can also :ref:`implement support for a new parser <support-for-new-robots-parser>`."
msgstr ""

#: ../../topics/downloader-middleware.rst:989
msgid "If :attr:`Request.meta <scrapy.http.Request.meta>` has ``dont_obey_robotstxt`` key set to True the request will be ignored by this middleware even if :setting:`ROBOTSTXT_OBEY` is enabled."
msgstr ""

#: ../../topics/downloader-middleware.rst:994
msgid "Parsers vary in several aspects:"
msgstr ""

#: ../../topics/downloader-middleware.rst:996
msgid "Language of implementation"
msgstr ""

#: ../../topics/downloader-middleware.rst:998
msgid "Supported specification"
msgstr ""

#: ../../topics/downloader-middleware.rst:1000
msgid "Support for wildcard matching"
msgstr ""

#: ../../topics/downloader-middleware.rst:1002
msgid "Usage of `length based rule <https://developers.google.com/search/reference/robots_txt#order-of-precedence-for-group-member-lines>`_: in particular for ``Allow`` and ``Disallow`` directives, where the most specific rule based on the length of the path trumps the less specific (shorter) rule"
msgstr ""

#: ../../topics/downloader-middleware.rst:1007
msgid "Performance comparison of different parsers is available at `the following link <https://anubhavp28.github.io/gsoc-weekly-checkin-12/>`_."
msgstr ""

#: ../../topics/downloader-middleware.rst:1013
msgid "Protego parser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1015
msgid "Based on `Protego <https://github.com/scrapy/protego>`_:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1017
#: ../../topics/downloader-middleware.rst:1083
msgid "implemented in Python"
msgstr ""

#: ../../topics/downloader-middleware.rst:1019
msgid "is compliant with `Google's Robots.txt Specification <https://developers.google.com/search/reference/robots_txt>`_"
msgstr ""

#: ../../topics/downloader-middleware.rst:1022
#: ../../topics/downloader-middleware.rst:1063
#: ../../topics/downloader-middleware.rst:1088
msgid "supports wildcard matching"
msgstr ""

#: ../../topics/downloader-middleware.rst:1024
#: ../../topics/downloader-middleware.rst:1065
msgid "uses the length based rule"
msgstr ""

#: ../../topics/downloader-middleware.rst:1026
msgid "Scrapy uses this parser by default."
msgstr ""

#: ../../topics/downloader-middleware.rst:1031
msgid "RobotFileParser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1033
msgid "Based on :class:`~urllib.robotparser.RobotFileParser`:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1035
msgid "is Python's built-in robots.txt_ parser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1037
#: ../../topics/downloader-middleware.rst:1060
#: ../../topics/downloader-middleware.rst:1085
msgid "is compliant with `Martijn Koster's 1996 draft specification <https://www.robotstxt.org/norobots-rfc.txt>`_"
msgstr ""

#: ../../topics/downloader-middleware.rst:1040
msgid "lacks support for wildcard matching"
msgstr ""

#: ../../topics/downloader-middleware.rst:1042
#: ../../topics/downloader-middleware.rst:1090
msgid "doesn't use the length based rule"
msgstr ""

#: ../../topics/downloader-middleware.rst:1044
msgid "It is faster than Protego and backward-compatible with versions of Scrapy before 1.8.0."
msgstr ""

#: ../../topics/downloader-middleware.rst:1046
msgid "In order to use this parser, set:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1048
msgid ":setting:`ROBOTSTXT_PARSER` to ``scrapy.robotstxt.PythonRobotParser``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1053
msgid "Reppy parser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1055
msgid "Based on `Reppy <https://github.com/seomoz/reppy/>`_:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1057
msgid "is a Python wrapper around `Robots Exclusion Protocol Parser for C++ <https://github.com/seomoz/rep-cpp>`_"
msgstr ""

#: ../../topics/downloader-middleware.rst:1067
msgid "Native implementation, provides better speed than Protego."
msgstr ""

#: ../../topics/downloader-middleware.rst:1069
#: ../../topics/downloader-middleware.rst:1092
msgid "In order to use this parser:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1071
msgid "Install `Reppy <https://github.com/seomoz/reppy/>`_ by running ``pip install reppy``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1073
msgid "Set :setting:`ROBOTSTXT_PARSER` setting to ``scrapy.robotstxt.ReppyRobotParser``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1079
msgid "Robotexclusionrulesparser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1081
msgid "Based on `Robotexclusionrulesparser <http://nikitathespider.com/python/rerp/>`_:"
msgstr ""

#: ../../topics/downloader-middleware.rst:1094
msgid "Install `Robotexclusionrulesparser <http://nikitathespider.com/python/rerp/>`_ by running ``pip install robotexclusionrulesparser``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1097
msgid "Set :setting:`ROBOTSTXT_PARSER` setting to ``scrapy.robotstxt.RerpRobotParser``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1103
msgid "Implementing support for a new parser"
msgstr ""

#: ../../topics/downloader-middleware.rst:1105
msgid "You can implement support for a new robots.txt_ parser by subclassing the abstract base class :class:`~scrapy.robotstxt.RobotParser` and implementing the methods described below."
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.allowed:1
msgid "Return ``True`` if  ``user_agent`` is allowed to crawl ``url``, otherwise return ``False``."
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.allowed:3
msgid "Absolute URL"
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.allowed:6
msgid "User agent"
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.from_crawler:1
msgid "Parse the content of a robots.txt_ file as bytes. This must be a class method. It must return a new instance of the parser backend."
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.from_crawler:4
msgid "crawler which made the request"
msgstr ""

#: ../../../scrapy/robotstxt.py:docstring of scrapy.robotstxt.RobotParser.from_crawler:7
msgid "content of a robots.txt_ file."
msgstr ""

#: ../../topics/downloader-middleware.rst:1118
msgid "DownloaderStats"
msgstr ""

#: ../../topics/downloader-middleware.rst:1125
msgid "Middleware that stores stats of all requests, responses and exceptions that pass through it."
msgstr ""

#: ../../topics/downloader-middleware.rst:1128
msgid "To use this middleware you must enable the :setting:`DOWNLOADER_STATS` setting."
msgstr ""

#: ../../topics/downloader-middleware.rst:1132
msgid "UserAgentMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:1139
msgid "Middleware that allows spiders to override the default user agent."
msgstr ""

#: ../../topics/downloader-middleware.rst:1141
msgid "In order for a spider to override the default user agent, its ``user_agent`` attribute must be set."
msgstr ""

#: ../../topics/downloader-middleware.rst:1147
msgid "AjaxCrawlMiddleware"
msgstr ""

#: ../../topics/downloader-middleware.rst:1153
msgid "Middleware that finds 'AJAX crawlable' page variants based on meta-fragment html tag. See https://developers.google.com/search/docs/ajax-crawling/docs/getting-started for more info."
msgstr ""

#: ../../topics/downloader-middleware.rst:1160
msgid "Scrapy finds 'AJAX crawlable' pages for URLs like ``'http://example.com/!#foo=bar'`` even without this middleware. AjaxCrawlMiddleware is necessary when URL doesn't contain ``'!#'``. This is often a case for 'index' or 'main' website pages."
msgstr ""

#: ../../topics/downloader-middleware.rst:1166
msgid "AjaxCrawlMiddleware Settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:1171
msgid "AJAXCRAWL_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:1175
msgid "Whether the AjaxCrawlMiddleware will be enabled. You may want to enable it for :ref:`broad crawls <topics-broad-crawls>`."
msgstr ""

#: ../../topics/downloader-middleware.rst:1179
msgid "HttpProxyMiddleware settings"
msgstr ""

#: ../../topics/downloader-middleware.rst:1185
msgid "HTTPPROXY_ENABLED"
msgstr ""

#: ../../topics/downloader-middleware.rst:1189
msgid "Whether or not to enable the :class:`HttpProxyMiddleware`."
msgstr ""

#: ../../topics/downloader-middleware.rst:1192
msgid "HTTPPROXY_AUTH_ENCODING"
msgstr ""

#: ../../topics/downloader-middleware.rst:1194
msgid "Default: ``\"latin-1\"``"
msgstr ""

#: ../../topics/downloader-middleware.rst:1196
msgid "The default encoding for proxy authentication on :class:`HttpProxyMiddleware`."
msgstr ""
