# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2021, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-10 01:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/items.rst:5
msgid "Items"
msgstr ""

#: ../../topics/items.rst:10
msgid "The main goal in scraping is to extract structured data from unstructured sources, typically, web pages. :ref:`Spiders <topics-spiders>` may return the extracted data as `items`, Python objects that define key-value pairs."
msgstr ""

#: ../../topics/items.rst:14
msgid "Scrapy supports :ref:`multiple types of items <item-types>`. When you create an item, you may use whichever type of item you want. When you write code that receives an item, your code should :ref:`work for any item type <supporting-item-types>`."
msgstr ""

#: ../../topics/items.rst:22
msgid "Item Types"
msgstr ""

#: ../../topics/items.rst:24
msgid "Scrapy supports the following types of items, via the `itemadapter`_ library: :ref:`dictionaries <dict-items>`, :ref:`Item objects <item-objects>`, :ref:`dataclass objects <dataclass-items>`, and :ref:`attrs objects <attrs-items>`."
msgstr ""

#: ../../topics/items.rst:33
msgid "Dictionaries"
msgstr ""

#: ../../topics/items.rst:35
msgid "As an item type, :class:`dict` is convenient and familiar."
msgstr ""

#: ../../topics/items.rst:40
msgid "Item objects"
msgstr ""

#: ../../topics/items.rst:42
msgid ":class:`Item` provides a :class:`dict`-like API plus additional features that make it the most feature-complete item type:"
msgstr ""

#: ../../topics/items.rst:47
msgid ":class:`Item` objects replicate the standard :class:`dict` API, including its ``__init__`` method."
msgstr ""

#: ../../topics/items.rst:50
msgid ":class:`Item` allows defining field names, so that:"
msgstr ""

#: ../../topics/items.rst:52
msgid ":class:`KeyError` is raised when using undefined field names (i.e. prevents typos going unnoticed)"
msgstr ""

#: ../../topics/items.rst:55
msgid ":ref:`Item exporters <topics-exporters>` can export all fields by default even if the first scraped object does not have values for all of them"
msgstr ""

#: ../../topics/items.rst:59
msgid ":class:`Item` also allows defining field metadata, which can be used to :ref:`customize serialization <topics-exporters-field-serialization>`."
msgstr ""

#: ../../topics/items.rst:62
msgid ":mod:`trackref` tracks :class:`Item` objects to help find memory leaks (see :ref:`topics-leaks-trackrefs`)."
msgstr ""

#: ../../topics/items.rst:65
msgid ":class:`Item` objects also provide the following additional API members:"
msgstr ""

#: ../../../scrapy/item.py:docstring of scrapy.item.DictItem.deepcopy:1
msgid "Return a :func:`~copy.deepcopy` of this item."
msgstr ""

#: ../../topics/items.rst:73
msgid "A dictionary containing *all declared fields* for this Item, not only those populated. The keys are the field names and the values are the :class:`Field` objects used in the :ref:`Item declaration <topics-items-declaring>`."
msgstr ""

#: ../../topics/items.rst:78
#: ../../topics/items.rst:109
#: ../../topics/items.rst:140
msgid "Example::"
msgstr ""

#: ../../topics/items.rst:89
msgid "Dataclass objects"
msgstr ""

#: ../../topics/items.rst:93
msgid ":func:`~dataclasses.dataclass` allows defining item classes with field names, so that :ref:`item exporters <topics-exporters>` can export all fields by default even if the first scraped object does not have values for all of them."
msgstr ""

#: ../../topics/items.rst:97
msgid "Additionally, ``dataclass`` items also allow to:"
msgstr ""

#: ../../topics/items.rst:99
#: ../../topics/items.rst:133
msgid "define the type and default value of each defined field."
msgstr ""

#: ../../topics/items.rst:101
msgid "define custom field metadata through :func:`dataclasses.field`, which can be used to :ref:`customize serialization <topics-exporters-field-serialization>`."
msgstr ""

#: ../../topics/items.rst:104
msgid "They work natively in Python 3.7 or later, or using the `dataclasses backport`_ in Python 3.6."
msgstr ""

#: ../../topics/items.rst:118
msgid "Field types are not enforced at run time."
msgstr ""

#: ../../topics/items.rst:123
msgid "attr.s objects"
msgstr ""

#: ../../topics/items.rst:127
msgid ":func:`attr.s` allows defining item classes with field names, so that :ref:`item exporters <topics-exporters>` can export all fields by default even if the first scraped object does not have values for all of them."
msgstr ""

#: ../../topics/items.rst:131
msgid "Additionally, ``attr.s`` items also allow to:"
msgstr ""

#: ../../topics/items.rst:135
msgid "define custom field :ref:`metadata <attrs:metadata>`, which can be used to :ref:`customize serialization <topics-exporters-field-serialization>`."
msgstr ""

#: ../../topics/items.rst:138
msgid "In order to use this type, the :doc:`attrs package <attrs:index>` needs to be installed."
msgstr ""

#: ../../topics/items.rst:151
#: ../../topics/items.rst:219
msgid "Working with Item objects"
msgstr ""

#: ../../topics/items.rst:156
msgid "Declaring Item subclasses"
msgstr ""

#: ../../topics/items.rst:158
msgid "Item subclasses are declared using a simple class definition syntax and :class:`Field` objects. Here is an example::"
msgstr ""

#: ../../topics/items.rst:170
msgid "Those familiar with `Django`_ will notice that Scrapy Items are declared similar to `Django Models`_, except that Scrapy Items are much simpler as there is no concept of different field types."
msgstr ""

#: ../../topics/items.rst:181
msgid "Declaring fields"
msgstr ""

#: ../../topics/items.rst:183
msgid ":class:`Field` objects are used to specify metadata for each field. For example, the serializer function for the ``last_updated`` field illustrated in the example above."
msgstr ""

#: ../../topics/items.rst:187
msgid "You can specify any kind of metadata for each field. There is no restriction on the values accepted by :class:`Field` objects. For this same reason, there is no reference list of all available metadata keys. Each key defined in :class:`Field` objects could be used by a different component, and only those components know about it. You can also define and use any other :class:`Field` key in your project too, for your own needs. The main goal of :class:`Field` objects is to provide a way to define all field metadata in one place. Typically, those components whose behaviour depends on each field use certain field keys to configure that behaviour. You must refer to their documentation to see which metadata keys are used by each component."
msgstr ""

#: ../../topics/items.rst:198
msgid "It's important to note that the :class:`Field` objects used to declare the item do not stay assigned as class attributes. Instead, they can be accessed through the :attr:`Item.fields` attribute."
msgstr ""

#: ../../topics/items.rst:204
msgid "The :class:`Field` class is just an alias to the built-in :class:`dict` class and doesn't provide any extra functionality or attributes. In other words, :class:`Field` objects are plain-old Python dicts. A separate class is used to support the :ref:`item declaration syntax <topics-items-declaring>` based on class attributes."
msgstr ""

#: ../../topics/items.rst:210
msgid "Field metadata can also be declared for ``dataclass`` and ``attrs`` items. Please refer to the documentation for `dataclasses.field`_ and `attr.ib`_ for additional information."
msgstr ""

#: ../../topics/items.rst:221
msgid "Here are some examples of common tasks performed with items, using the ``Product`` item :ref:`declared above  <topics-items-declaring>`. You will notice the API is very similar to the :class:`dict` API."
msgstr ""

#: ../../topics/items.rst:226
msgid "Creating items"
msgstr ""

#: ../../topics/items.rst:234
msgid "Getting field values"
msgstr ""

#: ../../topics/items.rst:274
msgid "Setting field values"
msgstr ""

#: ../../topics/items.rst:287
msgid "Accessing all populated values"
msgstr ""

#: ../../topics/items.rst:289
msgid "To access all populated values, just use the typical :class:`dict` API:"
msgstr ""

#: ../../topics/items.rst:301
msgid "Copying items"
msgstr ""

#: ../../topics/items.rst:303
msgid "To copy an item, you must first decide whether you want a shallow copy or a deep copy."
msgstr ""

#: ../../topics/items.rst:306
msgid "If your item contains :term:`mutable` values like lists or dictionaries, a shallow copy will keep references to the same mutable values across all different copies."
msgstr ""

#: ../../topics/items.rst:310
msgid "For example, if you have an item with a list of tags, and you create a shallow copy of that item, both the original item and the copy have the same list of tags. Adding a tag to the list of one of the items will add the tag to the other item as well."
msgstr ""

#: ../../topics/items.rst:315
msgid "If that is not the desired behavior, use a deep copy instead."
msgstr ""

#: ../../topics/items.rst:317
msgid "See :mod:`copy` for more information."
msgstr ""

#: ../../topics/items.rst:319
msgid "To create a shallow copy of an item, you can either call :meth:`~scrapy.item.Item.copy` on an existing item (``product2 = product.copy()``) or instantiate your item class from an existing item (``product2 = Product(product)``)."
msgstr ""

#: ../../topics/items.rst:324
msgid "To create a deep copy, call :meth:`~scrapy.item.Item.deepcopy` instead (``product2 = product.deepcopy()``)."
msgstr ""

#: ../../topics/items.rst:329
msgid "Other common tasks"
msgstr ""

#: ../../topics/items.rst:331
msgid "Creating dicts from items:"
msgstr ""

#: ../../topics/items.rst:336
msgid "Creating items from dicts:"
msgstr ""

#: ../../topics/items.rst:348
msgid "Extending Item subclasses"
msgstr ""

#: ../../topics/items.rst:350
msgid "You can extend Items (to add more fields or to change some metadata for some fields) by declaring a subclass of your original Item."
msgstr ""

#: ../../topics/items.rst:353
msgid "For example::"
msgstr ""

#: ../../topics/items.rst:359
msgid "You can also extend field metadata by using the previous field metadata and appending more values, or changing existing values, like this::"
msgstr ""

#: ../../topics/items.rst:365
msgid "That adds (or replaces) the ``serializer`` metadata key for the ``name`` field, keeping all the previously existing metadata values."
msgstr ""

#: ../../topics/items.rst:372
msgid "Supporting All Item Types"
msgstr ""

#: ../../topics/items.rst:374
msgid "In code that receives an item, such as methods of :ref:`item pipelines <topics-item-pipeline>` or :ref:`spider middlewares <topics-spider-middleware>`, it is a good practice to use the :class:`~itemadapter.ItemAdapter` class and the :func:`~itemadapter.is_item` function to write code that works for any :ref:`supported item type <item-types>`:"
msgstr ""

#: ../../../venv/lib/python3.8/site-packages/itemadapter/adapter.py:docstring of itemadapter.adapter.ItemAdapter:1
msgid "Wrapper class to interact with data container objects. It provides a common interface to extract and set data without having to take the object's type into account."
msgstr ""

#: ../../../venv/lib/python3.8/site-packages/itemadapter/utils.py:docstring of itemadapter.utils.is_item:1
msgid "Return True if the given object belongs to one of the supported types, False otherwise."
msgstr ""

#: ../../../venv/lib/python3.8/site-packages/itemadapter/utils.py:docstring of itemadapter.utils.is_item:3
msgid "Alias for ItemAdapter.is_item"
msgstr ""

#: ../../topics/items.rst:387
msgid "Other classes related to items"
msgstr ""

#: ../../../scrapy/item.py:docstring of scrapy.item.ItemMeta:1
msgid "Metaclass_ of :class:`Item` that handles field definitions."
msgstr ""
