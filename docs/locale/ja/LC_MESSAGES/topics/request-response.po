# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-10 01:26+0900\n"
"PO-Revision-Date: 2021-05-29 07:31+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0\n"
"Generated-By: Babel 2.7.0\n"

#: ../../topics/request-response.rst:5
msgid "Requests and Responses"
msgstr "リクエストとレスポンス"

#: ../../topics/request-response.rst:10
msgid ""
"Scrapy uses :class:`Request` and :class:`Response` objects for crawling web "
"sites."
msgstr ""
"Scrapyは、Webサイトのクロールに :class:`Request` と :class:`Response` オブ"
"ジェクトを使用します。"

#: ../../topics/request-response.rst:13
msgid ""
"Typically, :class:`Request` objects are generated in the spiders and pass "
"across the system until they reach the Downloader, which executes the "
"request and returns a :class:`Response` object which travels back to the "
"spider that issued the request."
msgstr ""
"通常、 :class:`Request` オブジェクトはスパイダーで生成され、ダウンローダーに"
"到達するまでシステム内をあちこち旅行(pass across)します。ダウンローダーはリク"
"エストを実行し、リクエストを発行したスパイダーに :class:`Response` オブジェク"
"トを返します。"

#: ../../topics/request-response.rst:18
msgid ""
"Both :class:`Request` and :class:`Response` classes have subclasses which "
"add functionality not required in the base classes. These are described "
"below in :ref:`topics-request-response-ref-request-subclasses` and :ref:"
"`topics-request-response-ref-response-subclasses`."
msgstr ""
":class:`Request` クラスと :class:`Response` クラスの両方には、基本クラスでは"
"必要のない機能を追加するサブクラスがあります。これらについては、 :ref:"
"`topics-request-response-ref-request-subclasses` と :ref:`topics-request-"
"response-ref-response-subclasses` で説明しています。"

#: ../../topics/request-response.rst:25
msgid "Request objects"
msgstr "Requestオブジェクト"

#: ../../topics/request-response.rst:29
msgid ""
"A :class:`Request` object represents an HTTP request, which is usually "
"generated in the Spider and executed by the Downloader, and thus generating "
"a :class:`Response`."
msgstr ""
":class:`Request` オブジェクトはHTTPリクエストを表します。これは通常スパイダー"
"で生成され、ダウンローダーによって実行され、そして、 :class:`Response` が生成"
"されます。"

#: ../../../scrapy/http/request/__init__.py:docstring of
#: scrapy.http.request.Request:0 ../../topics/request-response.rst:0
#: ../../../scrapy/http/response/__init__.py:docstring
#: scrapy.http.response.Response:0
msgid "Parameters"
msgstr "パラメータ"

#: ../../topics/request-response.rst:33
msgid ""
"the URL of this request  If the URL is invalid, a :exc:`ValueError` "
"exception is raised."
msgstr "このリクエストのURL。URLが不正な場合、 :exc:`ValueError` 例外が発生する。"

#: ../../topics/request-response.rst:33
msgid "the URL of this request"
msgstr "このリクエストのURL"

#: ../../topics/request-response.rst:35
msgid "If the URL is invalid, a :exc:`ValueError` exception is raised."
msgstr "URLが不正な場合、 :exc:`ValueError` 例外が発生する。"

#: ../../topics/request-response.rst:38
msgid ""
"the function that will be called with the response of this request (once "
"it's downloaded) as its first parameter. For more information see :ref:"
"`topics-request-response-ref-request-callback-arguments` below. If a Request "
"doesn't specify a callback, the spider's :meth:`~scrapy.spiders.Spider."
"parse` method will be used. Note that if exceptions are raised during "
"processing, errback is called instead."
msgstr ""
"最初のパラメーターとしてこのリクエストのレスポンス(ダウンロード後)に呼び出さ"
"れる関数。詳細については、以下の :ref:`topics-request-response-ref-request-"
"callback-arguments` を参照してください。リクエストでコールバックが指定されて"
"いない場合、スパイダーの :meth:`~scrapy.spiders.Spider.parse` メソッドが使用"
"されます。 処理中に例外が発生した場合、代わりにエラーバック(errback)が呼び出"
"されることに注意してください。"

#: ../../topics/request-response.rst:47
msgid "the HTTP method of this request. Defaults to ``'GET'``."
msgstr "このリクエストのHTTPメソッド。デフォルトは ``'GET'`` です。"

#: ../../topics/request-response.rst:50
msgid ""
"the initial values for the :attr:`Request.meta` attribute. If given, the "
"dict passed in this parameter will be shallow copied."
msgstr ""
":attr:`Request.meta` 属性の初期値。指定すると、このパラメーターに渡された辞書"
"は浅いコピー(shallow copy)されます。"

# 注意！「…この引数のタイプに関係なく、保存される最終的な値は ``str``」
#: ../../topics/request-response.rst:54
msgid ""
"the request body. If a string is passed, then it's encoded as bytes using "
"the ``encoding`` passed (which defaults to ``utf-8``). If ``body`` is not "
"given, an empty bytes object is stored. Regardless of the type of this "
"argument, the final value stored will be a bytes object (never a string or "
"``None``)."
msgstr "リクエスト・ボディ。 文字列が渡されると、渡された ``encoding`` (デフォルトは ``utf-8`` )を使用してバイトとしてエンコードされます。 ``body`` が指定されていない場合、空のバイト・オブジェクトが格納されます。この引数のタイプに関係なく、格納される最終値はバイト・オブジェクトになります(文字列や ``None`` ではありません)。"

#: ../../topics/request-response.rst:61
msgid ""
"the headers of this request. The dict values can be strings (for single "
"valued headers) or lists (for multi-valued headers). If ``None`` is passed "
"as value, the HTTP header will not be sent at all."
msgstr ""
"このリクエストのヘッダー。 辞書値は、文字列(単一値のヘッダーの場合)またはリス"
"ト(複数値のヘッダーの場合)です。 値として ``None`` が渡された場合、HTTPヘッ"
"ダーはまったく送信されません。"

#: ../../topics/request-response.rst:65 ../../topics/request-response.rst:112
msgid ""
"Cookies set via the ``Cookie`` header are not considered by the :ref:"
"`cookies-mw`. If you need to set cookies for a request, use the :class:"
"`Request.cookies <scrapy.http.Request>` parameter. This is a known current "
"limitation that is being worked on."
msgstr "``Cookie`` ヘッダーを介して設定されたクッキーは、 :ref:`cookies-mw` では考慮されません。リクエストにクッキーを設定する必要がある場合、 :class:`Request.cookies <scrapy.http.Request>` パラメータを使用します。 これは、現在改善に取り組んでいる既知の制限です。"

#: ../../topics/request-response.rst:72
msgid "the request cookies. These can be sent in two forms."
msgstr "リクエスト・クッキー。これらは2つの形式で送信できます。"

#: ../../topics/request-response.rst:74
msgid "Using a dict::"
msgstr "辞書の使用::"

#: ../../topics/request-response.rst:79
msgid "Using a list of dicts::"
msgstr "辞書のリストの使用::"

#: ../../topics/request-response.rst:87
msgid ""
"The latter form allows for customizing the ``domain`` and ``path`` "
"attributes of the cookie. This is only useful if the cookies are saved for "
"later requests."
msgstr ""
"後者の形式では、クッキーの ``domain`` および ``path`` 属性をカスタマイズでき"
"ます。これは、クッキーが後のリクエストのために保存される場合にのみ役立ちま"
"す。"

#: ../../topics/request-response.rst:93
msgid ""
"When some site returns cookies (in a response) those are stored in the "
"cookies for that domain and will be sent again in future requests. That's "
"the typical behaviour of any regular web browser."
msgstr "一部のサイトが(レスポンスで)クッキーを返すと、それらはそのドメインのクッキーに保存され、今後のリクエストで再度送信されます。これは通常のWebブラウザの一般的な動作です。"

#: ../../topics/request-response.rst:97
msgid ""
"To create a request that does not send stored cookies and does not store "
"received cookies, set the ``dont_merge_cookies`` key to ``True`` in :attr:"
"`request.meta <scrapy.http.Request.meta>`."
msgstr "保存されたクッキーを送信せず、受信したクッキーを保存しないリクエストを作成するには、 :attr:`request.meta <scrapy.http.Request.meta>` で ``dont_merge_cookies`` キーを ``True`` に設定します。"

#: ../../topics/request-response.rst:101
msgid ""
"Example of a request that sends manually-defined cookies and ignores cookie "
"storage::"
msgstr "手動で定義したクッキーを送信し、クッキーの保存を無視するリクエストの例::"

#: ../../topics/request-response.rst:110
msgid "For more info see :ref:`cookies-mw`."
msgstr "詳細については、 :ref:`cookies-mw` を参照してください。"

#: ../../topics/request-response.rst:119
msgid ""
"the encoding of this request (defaults to ``'utf-8'``). This encoding will "
"be used to percent-encode the URL and to convert the body to bytes (if given "
"as a string)."
msgstr "このリクエストのエンコーディング(デフォルトは ``'utf-8'``)。 このエンコードは、URLをパーセントエンコードし、本文をバイトに変換するために使用されます(文字列として指定されている場合)。"

#: ../../topics/request-response.rst:124
msgid ""
"the priority of this request (defaults to ``0``). The priority is used by "
"the scheduler to define the order used to process requests.  Requests with a "
"higher priority value will execute earlier. Negative values are allowed in "
"order to indicate relatively low-priority."
msgstr ""
"このリクエストの優先度(デフォルトは ``0``)。スケジューラーは優先度を使用し"
"て、リクエストの処理に使用される順序を定義します。より高い優先度値を持つリク"
"エストは、より早く実行されます。比較的低い優先度を示すために、負の値が許可さ"
"れています。"

#: ../../topics/request-response.rst:130
msgid ""
"indicates that this request should not be filtered by the scheduler. This is "
"used when you want to perform an identical request multiple times, to ignore "
"the duplicates filter. Use it with care, or you will get into crawling "
"loops. Default to ``False``."
msgstr ""
"このリクエストは、スケジューラによってフィルタリングされるべきではないことを"
"示します。 これは、重複フィルターを無視するために、同じリクエストを複数回実行"
"する場合に使用されます。注意して使用しないと、クロールループに陥ります。デ"
"フォルトは ``False`` です。"

#: ../../topics/request-response.rst:136
msgid ""
"a function that will be called if any exception was raised while processing "
"the request. This includes pages that failed with 404 HTTP errors and such. "
"It receives a :exc:`~twisted.python.failure.Failure` as first parameter. For "
"more information, see :ref:`topics-request-response-ref-errbacks` below."
msgstr "リクエストの処理中に例外が発生した場合に呼び出される関数。 これには、404 HTTPエラーなどで失敗したページが含まれます。 最初のパラメータとして :exc:`~twisted.python.failure.Failure` を受け取ります。 詳細については、以下の :ref:`topics-request-response-ref-errbacks` を参照してください。"

#: ../../topics/request-response.rst:143
msgid ""
"The *callback* parameter is no longer required when the *errback* parameter "
"is specified."
msgstr "*errback* パラメータが指定されている場合、*callback* パラメータは不要になりました。"

#: ../../topics/request-response.rst:148
msgid "Flags sent to the request, can be used for logging or similar purposes."
msgstr ""
"リクエストに送信されたフラグは、ロギングまたは同様の目的に使用できます。"

#: ../../topics/request-response.rst:151
msgid ""
"A dict with arbitrary data that will be passed as keyword arguments to the "
"Request's callback."
msgstr ""
"キーワード引数としてリクエストのコールバックに渡される任意のデータを含む辞"
"書。"

#: ../../topics/request-response.rst:156
msgid ""
"A string containing the URL of this request. Keep in mind that this "
"attribute contains the escaped URL, so it can differ from the URL passed in "
"the ``__init__`` method."
msgstr "このリクエストのURLを含む文字列。 この属性にはエスケープされたURLが含まれているため、 ``__init__`` メソッドで渡されたURLとは異なる可能性があることに注意してください。"

#: ../../topics/request-response.rst:160
msgid ""
"This attribute is read-only. To change the URL of a Request use :meth:"
"`replace`."
msgstr ""
"この属性は読み取り専用です。リクエストのURLを変更するには、 :meth:`replace` "
"を使用します。"

#: ../../topics/request-response.rst:165
msgid ""
"A string representing the HTTP method in the request. This is guaranteed to "
"be uppercase. Example: ``\"GET\"``, ``\"POST\"``, ``\"PUT\"``, etc"
msgstr ""
"リクエスト内のHTTPメソッドを表す文字列。 これは大文字であることが保証されてい"
"ます。 例： ``\"GET\"`` 、 ``\"POST\"`` 、 ``\"PUT\"`` など"

#: ../../topics/request-response.rst:170
msgid "A dictionary-like object which contains the request headers."
msgstr "リクエスト・ヘッダーを含む辞書のようなオブジェクト。"

#: ../../topics/request-response.rst:174
msgid "The request body as bytes."
msgstr "バイト(bytes)としてのリクエスト・ボディ。"

#: ../../topics/request-response.rst:176
msgid ""
"This attribute is read-only. To change the body of a Request use :meth:"
"`replace`."
msgstr ""
"この属性は読み取り専用です。リクエストの本文を変更するには、 :meth:`replace` "
"を使用します。"

#: ../../topics/request-response.rst:181
msgid ""
"A dict that contains arbitrary metadata for this request. This dict is empty "
"for new Requests, and is usually  populated by different Scrapy components "
"(extensions, middlewares, etc). So the data contained in this dict depends "
"on the extensions you have enabled."
msgstr ""
"このリクエストの任意のメタデータを含む辞書。 この辞書は、新しいリクエストに対"
"して空であり、通常、さまざまなScrapyコンポーネント(拡張機能、ミドルウェアな"
"ど)によって設定されます。したがって、この辞書に含まれるデータは、有効にした拡"
"張機能によって異なります。"

#: ../../topics/request-response.rst:186
msgid ""
"See :ref:`topics-request-meta` for a list of special meta keys recognized by "
"Scrapy."
msgstr ""
"Scrapyによって認識される特殊なメタ・キーのリストについては、 :ref:`topics-"
"request-meta` を参照してください。"

#: ../../topics/request-response.rst:189
msgid ""
"This dict is :doc:`shallow copied <library/copy>` when the request is cloned "
"using the ``copy()`` or ``replace()`` methods, and can also be accessed, in "
"your spider, from the ``response.meta`` attribute."
msgstr "この辞書は、リクエストが ``copy()`` または ``replace()`` メソッドを使用して複製された場合、 :doc:`浅いコピー(shallow copy) <library/copy>` であり、スパイダー内で ``response.meta`` 属性からアクセスすることもできます。"

#: ../../topics/request-response.rst:195
msgid ""
"A dictionary that contains arbitrary metadata for this request. Its contents "
"will be passed to the Request's callback as keyword arguments. It is empty "
"for new Requests, which means by default callbacks only get a :class:"
"`Response` object as argument."
msgstr ""
"このリクエストの任意のメタデータを含む辞書。その内容は、キーワード引数として"
"リクエストのコールバックに渡されます。新しいリクエストの場合は空です。つま"
"り、デフォルトではコールバックは引数として :class:`Response` オブジェクトのみ"
"を取得します。"

#: ../../topics/request-response.rst:200
msgid ""
"This dict is :doc:`shallow copied <library/copy>` when the request is cloned "
"using the ``copy()`` or ``replace()`` methods, and can also be accessed, in "
"your spider, from the ``response.cb_kwargs`` attribute."
msgstr "この辞書は、リクエストが ``copy()`` または ``replace()`` メソッドを使用して複製された場合、 :doc:`浅いコピー(shallow copy) <library/copy>` であり、スパイダー内で ``response.cb_kwargs`` 属性からアクセスすることもできます。"

#: ../../topics/request-response.rst:204
msgid ""
"In case of a failure to process the request, this dict can be accessed as "
"``failure.request.cb_kwargs`` in the request's errback. For more "
"information, see :ref:`errback-cb_kwargs`."
msgstr "リクエストの処理に失敗した場合、リクエストのエラーバック(errback)で ``failure.request.cb_kwargs`` としてこの辞書にアクセスできます。 詳細については、:ref:`errback-cb_kwargs` を参照してください。"

#: ../../topics/request-response.rst:210
msgid ""
"Return a new Request which is a copy of this Request. See also: :ref:`topics-"
"request-response-ref-request-callback-arguments`."
msgstr ""
"このリクエストのコピーである新しいリクエストを返します。 :ref:`topics-"
"request-response-ref-request-callback-arguments` も参照してください。"

#: ../../topics/request-response.rst:215
msgid ""
"Return a Request object with the same members, except for those members "
"given new values by whichever keyword arguments are specified. The :attr:"
"`Request.cb_kwargs` and :attr:`Request.meta` attributes are shallow copied "
"by default (unless new values are given as arguments). See also :ref:`topics-"
"request-response-ref-request-callback-arguments`."
msgstr ""
"指定されたキーワード引数によって新しい値が指定されたメンバーを除き、同じメン"
"バーを持つリクエスト・オブジェクトを返します。 :attr:`Request.cb_kwargs` およ"
"び :attr:`Request.meta` 属性は(新しい値が引数として与えられない限り)デフォル"
"トでは浅くコピー(shallow copy)されます。 :ref:`topics-request-response-ref-"
"request-callback-arguments` も参照してください。"

#: ../../../scrapy/http/request/__init__.py:docstring of
#: scrapy.http.request.Request.from_curl:1
msgid ""
"Create a Request object from a string containing a `cURL <https://curl.haxx."
"se/>`_ command. It populates the HTTP method, the URL, the headers, the "
"cookies and the body. It accepts the same arguments as the :class:`Request` "
"class, taking preference and overriding the values of the same arguments "
"contained in the cURL command."
msgstr ""
"`cURL <https://curl.haxx.se/>`_ コマンドを含む文字列からリクエストオブジェク"
"トを作成します。 HTTPメソッドとURLとヘッダーとクッキーとボディを設定しま"
"す。 :class:`Request` クラスと同じ引数を受け入れ、優先度を取得し、cURLコマン"
"ドに含まれる同じ引数の値をオーバーライドします。"

#: ../../../scrapy/http/request/__init__.py:docstring of
#: scrapy.http.request.Request.from_curl:8
msgid ""
"Unrecognized options are ignored by default. To raise an error when finding "
"unknown options call this method by passing ``ignore_unknown_options=False``."
msgstr ""
"認識されないオプションはデフォルトで無視されます。不明なオプションを見つける"
"ときにエラーを発生させるには、 ``ignore_unknown_options=False`` を渡してこの"
"メソッドを呼び出します。"

#: ../../../scrapy/http/request/__init__.py:docstring of
#: scrapy.http.request.Request.from_curl:12
msgid ""
"Using :meth:`from_curl` from :class:`~scrapy.http.Request` subclasses, such "
"as :class:`~scrapy.http.JSONRequest`, or :class:`~scrapy.http."
"XmlRpcRequest`, as well as having :ref:`downloader middlewares <topics-"
"downloader-middleware>` and :ref:`spider middlewares <topics-spider-"
"middleware>` enabled, such as :class:`~scrapy.downloadermiddlewares."
"defaultheaders.DefaultHeadersMiddleware`, :class:`~scrapy."
"downloadermiddlewares.useragent.UserAgentMiddleware`, or :class:`~scrapy."
"downloadermiddlewares.httpcompression.HttpCompressionMiddleware`, may modify "
"the :class:`~scrapy.http.Request` object."
msgstr ""
":class:`~scrapy.http.JSONRequest` または :class:`~scrapy.http.XmlRpcRequest` "
"のような :class:`~scrapy.http.Request` のサブクラスから :meth:`from_curl` を"
"使用し、:class:`~scrapy.downloadermiddlewares.defaultheaders."
"DefaultHeadersMiddleware` または :class:`~scrapy.downloadermiddlewares."
"useragent.UserAgentMiddleware` または :class:`~scrapy.downloadermiddlewares."
"httpcompression.HttpCompressionMiddleware` のような :ref:`ダウンローダー・ミ"
"ドルウェア<topics-downloader-middleware>` と :ref:`スパイダー・ミドルウェア"
"<topics-spider-middleware>` を有効にすることで、:class:`~scrapy.http."
"Request` オブジェクトを変更できます。"

#: ../../../scrapy/http/request/__init__.py:docstring of
#: scrapy.http.request.Request.from_curl:25
msgid ""
"To translate a cURL command into a Scrapy request, you may use `curl2scrapy "
"<https://michael-shub.github.io/curl2scrapy/>`_."
msgstr "cURL コマンドを Scrapy リクエストに変換するには、 `curl2scrapy <https://michael-shub.github.io/curl2scrapy/>`_ を使用できます。"

#: ../../topics/request-response.rst:226
msgid "Passing additional data to callback functions"
msgstr "追加のデータをコールバック関数に渡す"

#: ../../topics/request-response.rst:228
msgid ""
"The callback of a request is a function that will be called when the "
"response of that request is downloaded. The callback function will be called "
"with the downloaded :class:`Response` object as its first argument."
msgstr ""
"リクエストのコールバックは、そのリクエストのレスポンスがダウンロードされると"
"きに呼び出される関数です。コールバック関数は、ダウンロードされた :class:"
"`Response` オブジェクトを最初の引数として呼び出されます。"

#: ../../topics/request-response.rst:232
msgid "Example::"
msgstr "例::"

#: ../../topics/request-response.rst:242
msgid ""
"In some cases you may be interested in passing arguments to those callback "
"functions so you can receive the arguments later, in the second callback. "
"The following example shows how to achieve this by using the :attr:`Request."
"cb_kwargs` attribute:"
msgstr ""
"場合によっては、後で2番目のコールバックで引数を受け取ることができるように、こ"
"れらのコールバック関数に引数を渡すことに興味があるかもしれません。 次の例"
"は、 :attr:`Request.cb_kwargs` 属性を使用してこれを実現する方法を示していま"
"す:"

#: ../../topics/request-response.rst:263
msgid ""
":attr:`Request.cb_kwargs` was introduced in version ``1.7``. Prior to that, "
"using :attr:`Request.meta` was recommended for passing information around "
"callbacks. After ``1.7``, :attr:`Request.cb_kwargs` became the preferred way "
"for handling user information, leaving :attr:`Request.meta` for "
"communication with components like middlewares and extensions."
msgstr ""
":attr:`Request.cb_kwargs` はバージョン ``1.7`` で導入されました。 それ以前"
"は、コールバックに情報を渡すために :attr:`Request.meta` を使用することが推奨"
"されていました。``1.7`` 以降では、 :attr:`Request.cb_kwargs` がユーザー情報を"
"処理するための好ましい方法となり、 :attr:`Request.meta` は、ミドルウェアや拡"
"張機能などのコンポーネントとの通信のために残されています。"

#: ../../topics/request-response.rst:272
msgid "Using errbacks to catch exceptions in request processing"
msgstr ""
"リクエスト処理で例外をキャッチするためにエラーバック(errback)を使用する"

#: ../../topics/request-response.rst:274
msgid ""
"The errback of a request is a function that will be called when an exception "
"is raise while processing it."
msgstr ""
"リクエストのエラーバック(errback)は、処理中に例外が発生したときに呼び出される"
"関数です。"

#: ../../topics/request-response.rst:277
msgid ""
"It receives a :exc:`~twisted.python.failure.Failure` as first parameter and "
"can be used to track connection establishment timeouts, DNS errors etc."
msgstr "最初のパラメータとして :exc:`~twisted.python.failure.Failure` を受け取り、接続確立タイムアウト、DNSエラーなどを追跡するために使用できます。"

#: ../../topics/request-response.rst:280
msgid ""
"Here's an example spider logging all errors and catching some specific "
"errors if needed::"
msgstr ""
"すべてのエラーをログに記録し、必要に応じて特定のエラーをキャッチするスパイ"
"ダーの例を次に示します::"

#: ../../topics/request-response.rst:334
msgid "Accessing additional data in errback functions"
msgstr "errback関数内で追加データにアクセスする"

#: ../../topics/request-response.rst:336
msgid ""
"In case of a failure to process the request, you may be interested in "
"accessing arguments to the callback functions so you can process further "
"based on the arguments in the errback. The following example shows how to "
"achieve this by using ``Failure.request.cb_kwargs``::"
msgstr "リクエストの処理に失敗した場合は、コールバック関数の引数にアクセスして、errback内の引数に基づいてさらなる処理ができるようにすることをお勧めします。以下の例は、 ``Failure.request.cb_kwargs`` を使用してこれを実現する方法を示しています::"

#: ../../topics/request-response.rst:359
msgid "Request.meta special keys"
msgstr "Request.meta 特殊キー"

#: ../../topics/request-response.rst:361
msgid ""
"The :attr:`Request.meta` attribute can contain any arbitrary data, but there "
"are some special keys recognized by Scrapy and its built-in extensions."
msgstr ""
":attr:`Request.meta` 属性には任意のデータを含めることができますが、Scrapyとそ"
"の組み込み拡張機能によって認識される特殊なキーがあります。"

#: ../../topics/request-response.rst:364
msgid "Those are:"
msgstr "以下がその特殊キーです:"

#: ../../topics/request-response.rst:366
msgid ":reqmeta:`bindaddress`"
msgstr ":reqmeta:`bindaddress`"

#: ../../topics/request-response.rst:367
msgid ":reqmeta:`cookiejar`"
msgstr ":reqmeta:`cookiejar`"

#: ../../topics/request-response.rst:368
msgid ":reqmeta:`dont_cache`"
msgstr ":reqmeta:`dont_cache`"

#: ../../topics/request-response.rst:369
msgid ":reqmeta:`dont_merge_cookies`"
msgstr ":reqmeta:`dont_merge_cookies`"

#: ../../topics/request-response.rst:370
msgid ":reqmeta:`dont_obey_robotstxt`"
msgstr ":reqmeta:`dont_obey_robotstxt`"

#: ../../topics/request-response.rst:371
msgid ":reqmeta:`dont_redirect`"
msgstr ":reqmeta:`dont_redirect`"

#: ../../topics/request-response.rst:372
msgid ":reqmeta:`dont_retry`"
msgstr ":reqmeta:`dont_retry`"

#: ../../topics/request-response.rst:373
msgid ":reqmeta:`download_fail_on_dataloss`"
msgstr ":reqmeta:`download_fail_on_dataloss`"

#: ../../topics/request-response.rst:374
msgid ":reqmeta:`download_latency`"
msgstr ":reqmeta:`download_latency`"

#: ../../topics/request-response.rst:375
msgid ":reqmeta:`download_maxsize`"
msgstr ":reqmeta:`download_maxsize`"

#: ../../topics/request-response.rst:376
msgid ":reqmeta:`download_timeout`"
msgstr ":reqmeta:`download_timeout`"

#: ../../topics/request-response.rst:377
msgid "``ftp_password`` (See :setting:`FTP_PASSWORD` for more info)"
msgstr "``ftp_password`` (詳細は :setting:`FTP_PASSWORD` 参照)"

#: ../../topics/request-response.rst:378
msgid "``ftp_user`` (See :setting:`FTP_USER` for more info)"
msgstr "``ftp_user`` (詳細は :setting:`FTP_USER` 参照)"

#: ../../topics/request-response.rst:379
msgid ":reqmeta:`handle_httpstatus_all`"
msgstr ":reqmeta:`handle_httpstatus_all`"

#: ../../topics/request-response.rst:380
msgid ":reqmeta:`handle_httpstatus_list`"
msgstr ":reqmeta:`handle_httpstatus_list`"

#: ../../topics/request-response.rst:381
msgid ":reqmeta:`max_retry_times`"
msgstr ":reqmeta:`max_retry_times`"

#: ../../topics/request-response.rst:382
msgid ":reqmeta:`proxy`"
msgstr ":reqmeta:`proxy`"

#: ../../topics/request-response.rst:383
msgid ":reqmeta:`redirect_reasons`"
msgstr ":reqmeta:`redirect_reasons`"

#: ../../topics/request-response.rst:384
msgid ":reqmeta:`redirect_urls`"
msgstr ":reqmeta:`redirect_urls`"

#: ../../topics/request-response.rst:385
msgid ":reqmeta:`referrer_policy`"
msgstr ":reqmeta:`referrer_policy`"

#: ../../topics/request-response.rst:390
msgid "bindaddress"
msgstr "bindaddress"

# 原文が怪しい？
#: ../../topics/request-response.rst:392
msgid ""
"The IP of the outgoing IP address to use for the performing the request."
msgstr "リクエストの実行に使用する発信IPアドレスのIP"

#: ../../topics/request-response.rst:397
msgid "download_timeout"
msgstr "download_timeout"

#: ../../topics/request-response.rst:399
msgid ""
"The amount of time (in secs) that the downloader will wait before timing "
"out. See also: :setting:`DOWNLOAD_TIMEOUT`."
msgstr ""
"ダウンローダーがタイムアウトするまで待機する時間(秒)。 :setting:"
"`DOWNLOAD_TIMEOUT` も参照してください。"

#: ../../topics/request-response.rst:405
msgid "download_latency"
msgstr "download_latency"

#: ../../topics/request-response.rst:407
msgid ""
"The amount of time spent to fetch the response, since the request has been "
"started, i.e. HTTP message sent over the network. This meta key only becomes "
"available when the response has been downloaded. While most other meta keys "
"are used to control Scrapy behavior, this one is supposed to be read-only."
msgstr ""
"リクエストが開始されてから、つまりネットワークを介して送信されたHTTPメッセー"
"ジから、レスポンスの取得に費やされた時間。 このメタ・キーは、レスポンスがダウ"
"ンロードされた場合にのみ使用可能になります。他のほとんどのメタ・キーはScrapy"
"の動作を制御するために使用されますが、これは読み取り専用であると想定されてい"
"ます。"

#: ../../topics/request-response.rst:415
msgid "download_fail_on_dataloss"
msgstr "download_fail_on_dataloss"

#: ../../topics/request-response.rst:417
msgid ""
"Whether or not to fail on broken responses. See: :setting:"
"`DOWNLOAD_FAIL_ON_DATALOSS`."
msgstr ""
"壊れたレスポンスで失敗するかどうか。 :setting:`DOWNLOAD_FAIL_ON_DATALOSS` を"
"参照してください。"

#: ../../topics/request-response.rst:423
msgid "max_retry_times"
msgstr "max_retry_times"

#: ../../topics/request-response.rst:425
msgid ""
"The meta key is used set retry times per request. When initialized, the :"
"reqmeta:`max_retry_times` meta key takes higher precedence over the :setting:"
"`RETRY_TIMES` setting."
msgstr ""
"メタ・キーを使用して、リクエストごとに再試行回数を設定します。初期化される"
"と、 :reqmeta:`max_retry_times` メタ・キーは :setting:`RETRY_TIMES` 設定より"
"も優先されます。"

#: ../../topics/request-response.rst:433
msgid "Stopping the download of a Response"
msgstr "レスポンスのダウンロードの停止"

#: ../../topics/request-response.rst:435
msgid ""
"Raising a :exc:`~scrapy.exceptions.StopDownload` exception from a handler "
"for the :class:`~scrapy.signals.bytes_received` or :class:`~scrapy.signals."
"headers_received` signals will stop the download of a given response. See "
"the following example::"
msgstr ":class:`~scrapy.signals.bytes_received` または :class:`~scrapy.signals.headers_received` シグナルのハンドラーから :exc:`~scrapy.exceptions.StopDownload` 例外を発生させると、そのレスポンスのダウンロードを停止させます。以下の例を参照してください::"

#: ../../topics/request-response.rst:459
msgid "which produces the following output::"
msgstr "これにより、以下の出力が生成されます::"

#: ../../topics/request-response.rst:469
msgid ""
"By default, resulting responses are handled by their corresponding errbacks. "
"To call their callback instead, like in this example, pass ``fail=False`` to "
"the :exc:`~scrapy.exceptions.StopDownload` exception."
msgstr "デフォルトでは、結果のレスポンスは対応するエラーバック(errback)によって処理されます。 代わりにコールバックを呼び出すには、この例のように、``fail=False`` を :exc:`~scrapy.exceptions.StopDownload` 例外に渡します。"

#: ../../topics/request-response.rst:477
msgid "Request subclasses"
msgstr "Requestのサブクラス"

#: ../../topics/request-response.rst:479
msgid ""
"Here is the list of built-in :class:`Request` subclasses. You can also "
"subclass it to implement your own custom functionality."
msgstr ""
"以下は組み込みの :class:`Request` のサブクラスのリストです。また、サブクラス"
"化して独自のカスタム機能を実装することもできます。"

#: ../../topics/request-response.rst:483
msgid "FormRequest objects"
msgstr "FormRequestオブジェクト"

#: ../../topics/request-response.rst:485
msgid ""
"The FormRequest class extends the base :class:`Request` with functionality "
"for dealing with HTML forms. It uses `lxml.html forms`_  to pre-populate "
"form fields with form data from :class:`Response` objects."
msgstr ""
"FormRequestクラスは、ベースの :class:`Request` をHTMLフォームを処理する機能に"
"関して拡張します。 `lxml.html forms`_ を使用して、フォームフィールドに :"
"class:`Response` オブジェクトからのフォームデータを事前入力します。"

#: ../../topics/request-response.rst:493
msgid ""
"The :class:`FormRequest` class adds a new keyword parameter to the "
"``__init__`` method. The remaining arguments are the same as for the :class:"
"`Request` class and are not documented here."
msgstr ":class:`FormRequest` クラスは、新しいキーワード・パラメータを ``__init__`` メソッドに追加します。残りの引数は :class:`Request` クラスと同じであり、ここでは説明しません。"

#: ../../topics/request-response.rst:497
msgid ""
"is a dictionary (or iterable of (key, value) tuples) containing HTML Form "
"data which will be url-encoded and assigned to the body of the request."
msgstr ""
"これは、URLエンコードされてリクエストの本文に割り当てられるHTMLフォームデータ"
"を含む辞書(または (キー, 値)タプルの反復可能要素)です。"

#: ../../topics/request-response.rst:502
msgid ""
"The :class:`FormRequest` objects support the following class method in "
"addition to the standard :class:`Request` methods:"
msgstr ""
":class:`FormRequest` オブジェクトは、標準の :class:`Request` メソッドに加え"
"て、次のクラスメソッドをサポートします:"

#: ../../topics/request-response.rst:507
msgid ""
"Returns a new :class:`FormRequest` object with its form field values pre-"
"populated with those found in the HTML ``<form>`` element contained in the "
"given response. For an example see :ref:`topics-request-response-ref-request-"
"userlogin`."
msgstr ""
"指定のレスポンスに含まれるHTML ``<form>`` 要素で見つかった値が事前に入力され"
"たフォームフィールド値を持つ新しい :class:`FormRequest` オブジェクトを返しま"
"す。例については、 :ref:`topics-request-response-ref-request-userlogin` を参"
"照してください。"

#: ../../topics/request-response.rst:512
msgid ""
"The policy is to automatically simulate a click, by default, on any form "
"control that looks clickable, like a ``<input type=\"submit\">``.  Even "
"though this is quite convenient, and often the desired behaviour, sometimes "
"it can cause problems which could be hard to debug. For example, when "
"working with forms that are filled and/or submitted using javascript, the "
"default :meth:`from_response` behaviour may not be the most appropriate. To "
"disable this behaviour you can set the ``dont_click`` argument to ``True``. "
"Also, if you want to change the control clicked (instead of disabling it) "
"you can also use the ``clickdata`` argument."
msgstr ""
"ポリシーは、デフォルトでは、 ``<input type=\"submit\">`` のようにクリック可能"
"に見えるフォームコントロールのクリックを自動的にシミュレートすることです。 こ"
"れは非常に便利で、多くの場合望ましい動作ですが、時にはデバッグが困難な問題を"
"引き起こす可能性があります。 たとえば、javascriptを使用して、入力 and/or 送信"
"されたフォームを操作する場合、デフォルトの :meth:`from_response` 動作は最適で"
"はない場合があります。この動作を無効にするには、  ``dont_click`` 引数を  "
"``True``  に設定します。 また、(無効にするのではなく)クリックしたコントロール"
"を変更したい場合は、 ``clickdata`` 引数を使用することもできます。"

#: ../../topics/request-response.rst:523
msgid ""
"Using this method with select elements which have leading or trailing "
"whitespace in the option values will not work due to a `bug in lxml`_, which "
"should be fixed in lxml 3.8 and above."
msgstr ""
"オプション値に先頭または末尾の空白があるselect要素でこのメソッドを使用する"
"と、lxml 3.8で修正されるべきlxmlのバグ(`bug in lxml`_)のために機能しません。"

#: ../../topics/request-response.rst:527
msgid ""
"the response containing a HTML form which will be used to pre-populate the "
"form fields"
msgstr ""
"フォームフィールドに事前入力するために使用されるHTMLフォームを含むレスポンス"

#: ../../topics/request-response.rst:531
msgid "if given, the form with name attribute set to this value will be used."
msgstr "指定した場合、name属性をこの値に設定したフォームが使用されます。"

#: ../../topics/request-response.rst:534
msgid "if given, the form with id attribute set to this value will be used."
msgstr "指定した場合、この値に設定されたid属性を持つフォームが使用されます。"

#: ../../topics/request-response.rst:537
msgid "if given, the first form that matches the xpath will be used."
msgstr "指定すると、xpathに一致する最初のフォームが使用されます。"

#: ../../topics/request-response.rst:540
msgid "if given, the first form that matches the css selector will be used."
msgstr "指定した場合、cssセレクターに一致する最初のフォームが使用されます。"

#: ../../topics/request-response.rst:543
msgid ""
"the number of form to use, when the response contains multiple forms. The "
"first one (and also the default) is ``0``."
msgstr ""
"レスポンスに複数のフォームが含まれる場合に使用するフォームの数。 最初のもの"
"(およびデフォルト)は ``0`` です。"

#: ../../topics/request-response.rst:547
msgid ""
"fields to override in the form data. If a field was already present in the "
"response ``<form>`` element, its value is overridden by the one passed in "
"this parameter. If a value passed in this parameter is ``None``, the field "
"will not be included in the request, even if it was present in the response "
"``<form>`` element."
msgstr ""
"フォームデータでオーバーライドするフィールド。レスポンス ``<form>`` 要素に"
"フィールドが既に存在する場合、その値はこのパラメーターで渡された値によって"
"オーバーライドされます。このパラメーターに渡された値が ``None`` の場合、"
"フィールドはレスポンス ``<form>`` 要素に存在していても、リクエストに含まれま"
"せん。"

#: ../../topics/request-response.rst:554
msgid ""
"attributes to lookup the control clicked. If it's not given, the form data "
"will be submitted simulating a click on the first clickable element. In "
"addition to html attributes, the control can be identified by its zero-based "
"index relative to other submittable inputs inside the form, via the ``nr`` "
"attribute."
msgstr ""
"クリックされたコントロールを検索する属性。 指定されていない場合、最初のクリッ"
"ク可能な要素のクリックをシミュレートしてフォームデータが送信されます。 html属"
"性に加えて、コントロールは ``nr`` 属性を介して、フォーム内の他の送信可能な入"
"力に対するゼロベースのインデックスによって識別できます。"

#: ../../topics/request-response.rst:561
msgid ""
"If True, the form data will be submitted without clicking in any element."
msgstr "Trueの場合、要素をクリックせずにフォームデータが送信されます。"

#: ../../topics/request-response.rst:565
msgid ""
"The other parameters of this class method are passed directly to the :class:"
"`FormRequest` ``__init__`` method."
msgstr "このクラスメソッドの他のパラメータは、 :class:`FormRequest` の ``__init__`` メソッドに直接渡されます。"

#: ../../topics/request-response.rst:569
msgid "Request usage examples"
msgstr "Request使用例"

#: ../../topics/request-response.rst:572
msgid "Using FormRequest to send data via HTTP POST"
msgstr "HTTP POST経由でデータを送信するためにFormRequestを使う"

#: ../../topics/request-response.rst:574
msgid ""
"If you want to simulate a HTML Form POST in your spider and send a couple of "
"key-value fields, you can return a :class:`FormRequest` object (from your "
"spider) like this::"
msgstr ""
"スパイダーでHTMLフォームPOSTをシミュレートし、いくつかのキー値フィールドを送"
"信する場合、以下のように(スパイダーから) :class:`FormRequest` オブジェクトを"
"返すことができます::"

#: ../../topics/request-response.rst:585
msgid "Using FormRequest.from_response() to simulate a user login"
msgstr ""
"FormRequest.from_response() を使用してユーザーログインをシミュレートする"

#: ../../topics/request-response.rst:587
msgid ""
"It is usual for web sites to provide pre-populated form fields through "
"``<input type=\"hidden\">`` elements, such as session related data or "
"authentication tokens (for login pages). When scraping, you'll want these "
"fields to be automatically pre-populated and only override a couple of them, "
"such as the user name and password. You can use the :meth:`FormRequest."
"from_response` method for this job. Here's an example spider which uses it::"
msgstr ""
"Webサイトでは通常、セッション関連データや認証トークン(ログインページ用)など"
"の ``<input type=\"hidden\">`` 要素を介して事前入力されたフォームフィールドを"
"提供します。 スクレイピングするとき、これらのフィールドは自動的に事前入力さ"
"れ、ユーザー名やパスワードなどのいくつかのフィールドのみがオーバーライド必須"
"です。この作業には :meth:`FormRequest.from_response` メソッドを使用できます。"
"以下はこれを使用するスパイダーの例です::"

#: ../../topics/request-response.rst:621
msgid "JsonRequest"
msgstr "JsonRequest"

#: ../../topics/request-response.rst:623
msgid ""
"The JsonRequest class extends the base :class:`Request` class with "
"functionality for dealing with JSON requests."
msgstr ""
"JsonRequestクラスは、ベースの :class:`Request` クラスにJSONリクエストを処理す"
"る機能をくわえます。"

#: ../../topics/request-response.rst:628
msgid ""
"The :class:`JsonRequest` class adds two new keyword parameters to the "
"``__init__`` method. The remaining arguments are the same as for the :class:"
"`Request` class and are not documented here."
msgstr ":class:`JsonRequest` クラスは、2つの新しいキーワード・パラメータを ``__init__`` メソッドに追加します。残りの引数は :class:`Request` クラスと同じであり、ここでは説明しません。"

#: ../../topics/request-response.rst:632
msgid ""
"Using the :class:`JsonRequest` will set the ``Content-Type`` header to "
"``application/json`` and ``Accept`` header to ``application/json, text/"
"javascript, */*; q=0.01``"
msgstr ""
":class:`JsonRequest` を使用すると、``Content-Type`` ヘッダーを ``application/"
"json`` にセットし、そして、 ``Accept`` ヘッダーを ``application/json, text/"
"javascript, */*; q=0.01`` にセットします。"

#: ../../topics/request-response.rst:635
msgid ""
"is any JSON serializable object that needs to be JSON encoded and assigned "
"to body. if :attr:`Request.body` argument is provided this parameter will be "
"ignored. if :attr:`Request.body` argument is not provided and data argument "
"is provided :attr:`Request.method` will be set to ``'POST'`` automatically."
msgstr ""
"JSONエンコードして本文に割り当てる必要があるJSONシリアル化可能オブジェクトで"
"す。 :attr:`Request.body` 引数が指定されている場合、このパラメーターは無視さ"
"れます。 :attr:`Request.body` 引数が提供されておらず、データ引数が提供されて"
"いる場合、 :attr:`Request.method` は ``'POST'`` に自動的に設定されます。"

#: ../../topics/request-response.rst:641
msgid ""
"Parameters that will be passed to underlying :func:`json.dumps` method which "
"is used to serialize data into JSON format."
msgstr "データをJSON形式にシリアル化するために使用される、基礎となる :func:`json.dumps` メソッドに渡されるパラメータ。"

#: ../../topics/request-response.rst:646
msgid "JsonRequest usage example"
msgstr "JsonRequest使用例"

#: ../../topics/request-response.rst:648
msgid "Sending a JSON POST request with a JSON payload::"
msgstr "JSONペイロードを含むJSON POSTリクエストを送信する::"

#: ../../topics/request-response.rst:658
msgid "Response objects"
msgstr "Responseオブジェクト"

#: ../../topics/request-response.rst:662
msgid ""
"A :class:`Response` object represents an HTTP response, which is usually "
"downloaded (by the Downloader) and fed to the Spiders for processing."
msgstr ""
":class:`Response` オブジェクトはHTTPレスポンスを表し、通常は(ダウンローダーに"
"よって)ダウンロードされ、処理のためにスパイダーに送られます。"

#: ../../topics/request-response.rst:665
msgid "the URL of this response"
msgstr "このレスポンスのURL"

#: ../../topics/request-response.rst:668
msgid "the HTTP status of the response. Defaults to ``200``."
msgstr "レスポンスのHTTPステータス。デフォルトは ``200`` です。"

#: ../../topics/request-response.rst:671
msgid ""
"the headers of this response. The dict values can be strings (for single "
"valued headers) or lists (for multi-valued headers)."
msgstr ""
"このレスポンスのヘッダー。 辞書値は、文字列(単一値のヘッダーの場合)またはリス"
"ト(複数値のヘッダーの場合)です。"

#: ../../topics/request-response.rst:675
msgid ""
"the response body. To access the decoded text as a string, use ``response."
"text`` from an encoding-aware :ref:`Response subclass <topics-request-"
"response-ref-response-subclasses>`, such as :class:`TextResponse`."
msgstr "レスポンス・ボディ。デコードされたテキストに文字列としてアクセスするには、 :class:`TextResponse` のようなエンコーディング対応の :ref:`Responseサブクラス <topics-request-response-ref-response-subclasses>` の ``response.text`` を使用します。"

#: ../../topics/request-response.rst:681
msgid ""
"is a list containing the initial values for the :attr:`Response.flags` "
"attribute. If given, the list will be shallow copied."
msgstr ""
":attr:`Response.flags` 属性の初期値を含むリストです。 指定すると、リストは浅"
"くコピー(shallow copy)されます。"

#: ../../topics/request-response.rst:686
msgid ""
"the initial value of the :attr:`Response.request` attribute. This represents "
"the :class:`Request` that generated this response."
msgstr ""
":attr:`Response.request` 属性の初期値。これは、このレスポンスを生成した :"
"class:`Request` を表します。"

#: ../../topics/request-response.rst:690
msgid "an object representing the server's SSL certificate."
msgstr "サーバーのSSL証明書を表すオブジェクト。"

#: ../../topics/request-response.rst:693 ../../topics/request-response.rst:804
msgid "The IP address of the server from which the Response originated."
msgstr "レスポンスの送信元のサーバーのIPアドレス。"

#: ../../topics/request-response.rst:696
msgid ""
"The protocol that was used to download the response. For instance: "
"\"HTTP/1.0\", \"HTTP/1.1\", \"h2\""
msgstr "レスポンスのダウンロードに使用されたプロトコル。 例: \"HTTP/1.0\", \"HTTP/1.1\", \"h2\""

#: ../../topics/request-response.rst:700
msgid "The ``certificate`` parameter."
msgstr "``certificate`` パラメータ。"

#: ../../topics/request-response.rst:703
msgid "The ``ip_address`` parameter."
msgstr "``ip_address`` パラメータ。"

#: ../../topics/request-response.rst:706
msgid "The ``protocol`` parameter."
msgstr "``protocol`` パラメータ。"

#: ../../topics/request-response.rst:711
msgid "A string containing the URL of the response."
msgstr "レスポンスのURLを含む文字列。"

#: ../../topics/request-response.rst:713
msgid ""
"This attribute is read-only. To change the URL of a Response use :meth:"
"`replace`."
msgstr ""
"この属性は読み取り専用です。レスポンスのURLを変更するには、 :meth:`replace` "
"を使用します。"

#: ../../topics/request-response.rst:718
msgid ""
"An integer representing the HTTP status of the response. Example: ``200``, "
"``404``."
msgstr "レスポンスのHTTPステータスを表す整数。例： ``200`` 、 ``404``"

#: ../../topics/request-response.rst:723
msgid ""
"A dictionary-like object which contains the response headers. Values can be "
"accessed using :meth:`get` to return the first header value with the "
"specified name or :meth:`getlist` to return all header values with the "
"specified name. For example, this call will give you all cookies in the "
"headers::"
msgstr ""
"レスポンス・ヘッダーを含む辞書のようなオブジェクト。値にアクセスするには、 :"
"meth:`get` を使用して指定した名前の最初のヘッダー値を返すか、 :meth:"
"`getlist` を使用して指定した名前のすべてのヘッダー値を返します。たとえば、以"
"下のの呼び出しはヘッダーのすべてのクッキーを提供します::"

#: ../../topics/request-response.rst:733
msgid "The response body as bytes."
msgstr "バイト(bytes)としてのレスポンス・ボディ"

#: ../../topics/request-response.rst:735
msgid ""
"If you want the body as a string, use :attr:`TextResponse.text` (only "
"available in :class:`TextResponse` and subclasses)."
msgstr "ボディを文字列として使用する場合は、 :attr:`TextResponse.text` を使用します( :class:`TextResponse` およびそのサブクラスでのみ使用可能)。"

#: ../../topics/request-response.rst:738
msgid ""
"This attribute is read-only. To change the body of a Response use :meth:"
"`replace`."
msgstr ""
"この属性は読み取り専用です。 レスポンスのボディを変更するには、 :meth:"
"`replace` を使用します。"

#: ../../topics/request-response.rst:743
msgid ""
"The :class:`Request` object that generated this response. This attribute is "
"assigned in the Scrapy engine, after the response and the request have "
"passed through all :ref:`Downloader Middlewares <topics-downloader-"
"middleware>`. In particular, this means that:"
msgstr ""
"このレスポンスを生成した :class:`Request` オブジェクト。この属性は、レスポン"
"スとリクエストが、すべての :ref:`ダウンローダー・ミドルウェア<topics-"
"downloader-middleware>` を通過した後、Scrapyエンジンで割り当てられます。 特"
"に、これは以下を意味します::"

#: ../../topics/request-response.rst:748
msgid ""
"HTTP redirections will cause the original request (to the URL before "
"redirection) to be assigned to the redirected response (with the final URL "
"after redirection)."
msgstr ""
"HTTPリダイレクトにより、元のリクエスト(リダイレクト前のURLへ)がリダイレクトさ"
"れたレスポンス(リダイレクト後の最終URL)に割り当てられます。"

#: ../../topics/request-response.rst:752
msgid "Response.request.url doesn't always equal Response.url"
msgstr "Response.request.urlは必ずしもResponse.urlと同じではありません"

#: ../../topics/request-response.rst:754
msgid ""
"This attribute is only available in the spider code, and in the :ref:`Spider "
"Middlewares <topics-spider-middleware>`, but not in Downloader Middlewares "
"(although you have the Request available there by other means) and handlers "
"of the :signal:`response_downloaded` signal."
msgstr ""
"この属性は、スパイダー・コード、および :ref:`スパイダー・ミドルウェア<topics-"
"spider-middleware>` でのみ使用できます。ただし、(他の方法でリクエストを使用で"
"きる場合の)ダウンローダー・ミドルウェアと :signal:`response_downloaded` シグ"
"ナルのハンドラーには含まれません。"

#: ../../topics/request-response.rst:761
msgid ""
"A shortcut to the :attr:`Request.meta` attribute of the :attr:`Response."
"request` object (i.e. ``self.request.meta``)."
msgstr ""
":attr:`Response.request` オブジェクトの :attr:`Request.meta` 属性(つまり "
"``self.request.meta`` )へのショートカット。"

#: ../../topics/request-response.rst:764
msgid ""
"Unlike the :attr:`Response.request` attribute, the :attr:`Response.meta` "
"attribute is propagated along redirects and retries, so you will get the "
"original :attr:`Request.meta` sent from your spider."
msgstr ""
":attr:`Response.request` 属性とは異なり、 :attr:`Response.meta` 属性はリダイ"
"レクトと再試行に沿って伝播されるため、元の :attr:`Request.meta` がスパイダー"
"から送信されます。"

#: ../../topics/request-response.rst:768
msgid ":attr:`Request.meta` attribute"
msgstr ":attr:`Request.meta` 属性"

#: ../../topics/request-response.rst:774
msgid ""
"A shortcut to the :attr:`Request.cb_kwargs` attribute of the :attr:`Response."
"request` object (i.e. ``self.request.cb_kwargs``)."
msgstr ":attr:`Response.request` オブジェクトの :attr:`Request.cb_kwargs` 属性(つまり ``self.request.cb_kwargs`` )へのショートカット。"

#: ../../topics/request-response.rst:777
msgid ""
"Unlike the :attr:`Response.request` attribute, the :attr:`Response."
"cb_kwargs` attribute is propagated along redirects and retries, so you will "
"get the original :attr:`Request.cb_kwargs` sent from your spider."
msgstr ":attr:`Response.request` 属性とは異なり、 :attr:`Response.cb_kwargs` 属性はリダイレクトと再試行に沿って伝播されるため、元の :attr:`Request.cb_kwargs` がスパイダーから送信されます。"

#: ../../topics/request-response.rst:782
msgid ":attr:`Request.cb_kwargs` attribute"
msgstr ":attr:`Request.cb_kwargs` 属性"

#: ../../topics/request-response.rst:786
msgid ""
"A list that contains flags for this response. Flags are labels used for "
"tagging Responses. For example: ``'cached'``, ``'redirected``', etc. And "
"they're shown on the string representation of the Response (`__str__` "
"method) which is used by the engine for logging."
msgstr ""
"このレスポンスのフラグを含むリスト。フラグは、レスポンスのタグ付けに使用され"
"るラベルです。 例： ``'cached'`` 、 ``'redirected``' など。これらは、エンジン"
"がログ記録に使用するResponse ( `__str__` メソッド)の文字列表現に表示されま"
"す。"

#: ../../topics/request-response.rst:795
msgid ""
"A :class:`twisted.internet.ssl.Certificate` object representing the server's "
"SSL certificate."
msgstr "サーバーのSSL証明書を表す :class:`twisted.internet.ssl.Certificate` オブジェクト。"

#: ../../topics/request-response.rst:798
msgid "Only populated for ``https`` responses, ``None`` otherwise."
msgstr "``https`` のレスポンスに対してのみ入力され、それ以外の場合は ``None`` が入力されます。"

#: ../../topics/request-response.rst:806
msgid ""
"This attribute is currently only populated by the HTTP 1.1 download handler, "
"i.e. for ``http(s)`` responses. For other handlers, :attr:`ip_address` is "
"always ``None``."
msgstr "この属性は現在、HTTP 1.1 ダウンロードハンドラ、つまり ``http(s)`` のレスポンスによってのみ入力されます。 他のハンドラの場合、 :attr:`ip_address` は常に ``None`` です。"

#: ../../topics/request-response.rst:814
msgid ""
"The protocol that was used to download the response. For instance: "
"\"HTTP/1.0\", \"HTTP/1.1\""
msgstr "レスポンスのダウンロードに使用されたプロトコル。 例: \"HTTP/1.0\", \"HTTP/1.1\""

#: ../../topics/request-response.rst:817
msgid ""
"This attribute is currently only populated by the HTTP download handlers, i."
"e. for ``http(s)`` responses. For other handlers, :attr:`protocol` is always "
"``None``."
msgstr "この属性は現在、HTTPダウンロードハンドラ、つまり ``http(s)`` レスポンスによってのみ入力されます。 他のハンドラの場合、 :attr:`protocol` は常に ``None`` です。"

#: ../../topics/request-response.rst:823
msgid "Returns a new Response which is a copy of this Response."
msgstr "このレスポンスのコピーである新しいレスポンスを返します。"

#: ../../topics/request-response.rst:827
msgid ""
"Returns a Response object with the same members, except for those members "
"given new values by whichever keyword arguments are specified. The "
"attribute :attr:`Response.meta` is copied by default."
msgstr ""
"指定されたキーワード引数によって新しい値が指定されたメンバーを除き、同じメン"
"バーを持つレスポンスオブジェクトを返します。属性 :attr:`Response.meta` はデ"
"フォルトでコピーされます。"

#: ../../topics/request-response.rst:833
msgid ""
"Constructs an absolute url by combining the Response's :attr:`url` with a "
"possible relative url."
msgstr ""
"指定の *url* (たぶん相対URL)と レスポンスの :attr:`url` ( ``Response.url`` ) "
"を組み合わせて、絶対URLを構築します。"

#: ../../topics/request-response.rst:836
msgid ""
"This is a wrapper over :func:`~urllib.parse.urljoin`, it's merely an alias "
"for making this call::"
msgstr "これは :func:`~urllib.parse.urljoin` のラッパーであり、以下の呼び出しを行うための単なるエイリアスです::"

#: ../../../scrapy/http/response/__init__.py:docstring of
#: scrapy.http.response.Response.follow:1
msgid ""
"Return a :class:`~.Request` instance to follow a link ``url``. It accepts "
"the same arguments as ``Request.__init__`` method, but ``url`` can be a "
"relative URL or a ``scrapy.link.Link`` object, not only an absolute URL."
msgstr ""
"リンク ``url`` をたどるための :class:`~.Request` インスタンスを返します。 "
"``Request.__init__`` メソッドと同じ引数を受け入れますが、 ``url`` は絶対URLだ"
"けでなく、相対URLまたは ``scrapy.link.Link`` オブジェクトでもかまいません。"

#: ../../../scrapy/http/response/__init__.py:docstring of
#: scrapy.http.response.Response.follow:6
msgid ""
":class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` method "
"which supports selectors in addition to absolute/relative URLs and Link "
"objects."
msgstr ""
":class:`~.TextResponse` は、絶対URLと相対URLとLinkオブジェクトに加えてセレク"
"ターをサポートする :meth:`~.TextResponse.follow` メソッドを提供します。"

#: ../../../scrapy/http/response/__init__.py:docstring of
#: scrapy.http.response.Response.follow:10
msgid "The *flags* parameter."
msgstr "*flags* パラメータ。"

#: ../../../scrapy/http/response/__init__.py:docstring of
#: scrapy.http.response.Response.follow_all:3
msgid ""
"Return an iterable of :class:`~.Request` instances to follow all links in "
"``urls``. It accepts the same arguments as ``Request.__init__`` method, but "
"elements of ``urls`` can be relative URLs or :class:`~scrapy.link.Link` "
"objects, not only absolute URLs."
msgstr "``urls`` 内のすべてのリンクをたどるために、反復可能(iterable)な :class:`~.Request` インスタンスを返します。 ``Request.__init__`` メソッドと同じ引数を受け入れますが、 ``urls`` の要素は、絶対URLだけでなく、相対URLまたは :class:`~scrapy.link.Link` オブジェクトにすることができます。"

#: ../../../scrapy/http/response/__init__.py:docstring of
#: scrapy.http.response.Response.follow_all:8
msgid ""
":class:`~.TextResponse` provides a :meth:`~.TextResponse.follow_all` method "
"which supports selectors in addition to absolute/relative URLs and Link "
"objects."
msgstr ":class:`~.TextResponse` は、絶対URLと相対URLとLinkオブジェクトに加えてセレクターをサポートする :meth:`~.TextResponse.follow_all` メソッドを提供します。"

#: ../../topics/request-response.rst:849
msgid "Response subclasses"
msgstr "Responseのサブクラス"

#: ../../topics/request-response.rst:851
msgid ""
"Here is the list of available built-in Response subclasses. You can also "
"subclass the Response class to implement your own functionality."
msgstr ""
"使用可能な組み込みResponseのサブクラスのリストは以下のとおりです。 Responseク"
"ラスをサブクラス化して、独自の機能を実装することもできます。"

#: ../../topics/request-response.rst:855
msgid "TextResponse objects"
msgstr "TextResponseオブジェクト"

#: ../../topics/request-response.rst:859
msgid ""
":class:`TextResponse` objects adds encoding capabilities to the base :class:"
"`Response` class, which is meant to be used only for binary data, such as "
"images, sounds or any media file."
msgstr ""
":class:`TextResponse` オブジェクトは、エンコード機能を、ベースの :class:"
"`Response` クラスに追加します。これは、画像、音声、メディアファイルなどのバイ"
"ナリデータにのみ使用することを目的としています。"

#: ../../topics/request-response.rst:863
msgid ""
":class:`TextResponse` objects support a new ``__init__`` method argument, in "
"addition to the base :class:`Response` objects. The remaining functionality "
"is the same as for the :class:`Response` class and is not documented here."
msgstr ":class:`TextResponse` オブジェクトは、基本の :class:`Response` オブジェクトに加えて、新しい ``__init__`` メソッド引数をサポートします。 残りの機能は :class:`Response` クラスの場合と同じであり、ここでは説明しません。"

#: ../../topics/request-response.rst:867
msgid ""
"is a string which contains the encoding to use for this response. If you "
"create a :class:`TextResponse` object with a string as body, it will be "
"converted to bytes encoded using this encoding. If *encoding* is ``None`` "
"(default), the encoding will be looked up in the response headers and body "
"instead."
msgstr "このレスポンスに使用するエンコーディングを含む文字列です。文字列をボディとして :class:`TextResponse` オブジェクトを作成すると、このエンコーディングを使用してエンコードされたバイトに変換されます。 *encoding* が ``None`` (デフォルト)の場合、レスポンス・ヘッダーとボディの中でエンコーディングを探します。"

#: ../../topics/request-response.rst:874
msgid ""
":class:`TextResponse` objects support the following attributes in addition "
"to the standard :class:`Response` ones:"
msgstr ""
":class:`TextResponse` オブジェクトは、標準の :class:`Response` に加えて、次の"
"属性をサポートします:"

#: ../../topics/request-response.rst:879
msgid "Response body, as a string."
msgstr "文字列としてのスポンス・ボディ"

#: ../../topics/request-response.rst:881
msgid ""
"The same as ``response.body.decode(response.encoding)``, but the result is "
"cached after the first call, so you can access ``response.text`` multiple "
"times without extra overhead."
msgstr ""
"``response.body.decode(response.encoding)`` と同じですが、最初の呼び出し後に"
"結果がキャッシュされるため、余分なオーバーヘッドなしで ``response.text`` に複"
"数回アクセスできます。"

#: ../../topics/request-response.rst:887
msgid ""
"``str(response.body)`` is not a correct way to convert the response body "
"into a string:"
msgstr "``str(response.body)`` は、レスポンス・ボディを文字列に変換する正しい方法ではありません:"

#: ../../topics/request-response.rst:896
msgid ""
"A string with the encoding of this response. The encoding is resolved by "
"trying the following mechanisms, in order:"
msgstr ""
"このレスポンスのエンコードを含む文字列。 エンコードは、次のメカニズムを順番に"
"試して解決されます:"

#: ../../topics/request-response.rst:899
msgid "the encoding passed in the ``__init__`` method ``encoding`` argument"
msgstr "``__init__`` メソッドの ``encoding`` 引数で渡されたエンコーディング"

#: ../../topics/request-response.rst:901
msgid ""
"the encoding declared in the Content-Type HTTP header. If this encoding is "
"not valid (i.e. unknown), it is ignored and the next resolution mechanism is "
"tried."
msgstr ""
"Content-Type HTTPヘッダーで宣言されたエンコーディング。 このエンコードが有効"
"でない(つまり不明の)場合、無視され、次の解決メカニズムが試行されます。"

#: ../../topics/request-response.rst:905
msgid ""
"the encoding declared in the response body. The TextResponse class doesn't "
"provide any special functionality for this. However, the :class:"
"`HtmlResponse` and :class:`XmlResponse` classes do."
msgstr ""
"レスポンス・ボディで宣言されたエンコーディング。 TextResponseクラスは、このた"
"めの特別な機能を提供しません。 ただし、 :class:`HtmlResponse` と :class:"
"`XmlResponse` クラスはサポートします。"

#: ../../topics/request-response.rst:909
msgid ""
"the encoding inferred by looking at the response body. This is the more "
"fragile method but also the last one tried."
msgstr ""
"レスポンス・ボディを見て推測するエンコーディング。 これはより壊れやすい方法で"
"すが、最後に試す方法でもあります。"

#: ../../topics/request-response.rst:914
msgid ""
"A :class:`~scrapy.selector.Selector` instance using the response as target. "
"The selector is lazily instantiated on first access."
msgstr ""
"レスポンスをターゲットとして使用する :class:`~scrapy.selector.Selector` イン"
"スタンス。セレクターは最初のアクセスで遅延的(lazily)にインスタンス化されま"
"す。"

#: ../../topics/request-response.rst:917
msgid ""
":class:`TextResponse` objects support the following methods in addition to "
"the standard :class:`Response` ones:"
msgstr ""
":class:`TextResponse` オブジェクトは標準の :class:`Response` に加えて以下のメ"
"ソッドをサポートします:"

#: ../../topics/request-response.rst:922
msgid "A shortcut to ``TextResponse.selector.xpath(query)``::"
msgstr "``TextResponse.selector.xpath(query)`` へのショートカット::"

#: ../../topics/request-response.rst:928
msgid "A shortcut to ``TextResponse.selector.css(query)``::"
msgstr "``TextResponse.selector.css(query)`` へのショートカット::"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:1
msgid ""
"Return a :class:`~.Request` instance to follow a link ``url``. It accepts "
"the same arguments as ``Request.__init__`` method, but ``url`` can be not "
"only an absolute URL, but also"
msgstr ""
"リンク ``url`` をたどるには :class:`~.Request` インスタンスを返します。 "
"``Request.__init__`` メソッドと同じ引数を受け入れますが、 ``url`` は絶対URLだ"
"けでなく、以下も受け入れます。"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:5
#: scrapy.http.response.text.TextResponse.follow_all:6
msgid "a relative URL"
msgstr "相対URL"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:6
#: scrapy.http.response.text.TextResponse.follow_all:7
msgid ""
"a :class:`~scrapy.link.Link` object, e.g. the result of :ref:`topics-link-"
"extractors`"
msgstr ":class:`~scrapy.link.Link` オブジェクト。例: :ref:`topics-link-extractors` の結果"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:8
#: scrapy.http.response.text.TextResponse.follow_all:9
msgid ""
"a :class:`~scrapy.selector.Selector` object for a ``<link>`` or ``<a>`` "
"element, e.g. ``response.css('a.my_link')[0]``"
msgstr "``<link>`` または ``<a>`` 要素の :class:`~scrapy.selector.Selector` オブジェクト。例えば ``response.css('a.my_link')[0]``"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:10
#: scrapy.http.response.text.TextResponse.follow_all:11
msgid ""
"an attribute :class:`~scrapy.selector.Selector` (not SelectorList), e.g. "
"``response.css('a::attr(href)')[0]`` or ``response.xpath('//img/@src')[0]``"
msgstr "属性 :class:`~scrapy.selector.Selector` (SelectorListではありません)。 例: ``response.css('a::attr(href)')[0]`` または ``response.xpath('//img/@src')[0]``"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow:14
msgid "See :ref:`response-follow-example` for usage examples."
msgstr "使用例については :ref:`response-follow-example` を参照して下さい。"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow_all:1
msgid ""
"A generator that produces :class:`~.Request` instances to follow all links "
"in ``urls``. It accepts the same arguments as the :class:`~.Request`'s "
"``__init__`` method, except that each ``urls`` element does not need to be "
"an absolute URL, it can be any of the following:"
msgstr "``urls`` 内のすべてのリンクをたどるための :class:`~.Request` インスタンスを生成するジェネレータ。 :class:`~.Request` の ``__init__`` メソッドと同じ引数を受け入れますが、各 ``urls`` 要素は絶対 URL である必要はなく、以下のいずれも指定できます:"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow_all:15
msgid ""
"In addition, ``css`` and ``xpath`` arguments are accepted to perform the "
"link extraction within the ``follow_all`` method (only one of ``urls``, "
"``css`` and ``xpath`` is accepted)."
msgstr "さらに、 ``css`` および ``xpath`` 引数は、 ``follow_all`` メソッド内でリンク抽出を実行するために受け入れられます( ``urls`` および ``css`` および ``xpath`` のうちの1つだけが受け入れられます)。"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.follow_all:18
msgid ""
"Note that when passing a ``SelectorList`` as argument for the ``urls`` "
"parameter or using the ``css`` or ``xpath`` parameters, this method will not "
"produce requests for selectors from which links cannot be obtained (for "
"instance, anchor tags without an ``href`` attribute)"
msgstr "``SelectorList`` を ``urls`` パラメータの引数として渡す場合、または ``css`` または ``xpath`` パラメータを使用する場合、このメソッドはリンクを取得できないセレクターのリクエストを生成しないことに注意してください。 (例えば、``href`` 属性のないアンカータグ)"

#: ../../../scrapy/http/response/text.py:docstring of
#: scrapy.http.response.text.TextResponse.json:3
msgid "Deserialize a JSON document to a Python object."
msgstr "JSON ドキュメントを Python オブジェクトに逆シリアライズ(deserialize)します。"

#: ../../topics/request-response.rst:938
msgid ""
"Returns a Python object from deserialized JSON document. The result is "
"cached after the first call."
msgstr "逆シリアライズ(deserialize)された JSON ドキュメントから Python オブジェクトを返します。 結果は、最初の呼び出し後にキャッシュされます。"

#: ../../topics/request-response.rst:943
msgid "HtmlResponse objects"
msgstr "HtmlResponseオブジェクト"

#: ../../topics/request-response.rst:947
msgid ""
"The :class:`HtmlResponse` class is a subclass of :class:`TextResponse` which "
"adds encoding auto-discovering support by looking into the HTML `meta http-"
"equiv`_ attribute.  See :attr:`TextResponse.encoding`."
msgstr ""
":class:`HtmlResponse` クラスは :class:`TextResponse` のサブクラスで、HTMLの "
"`meta http-equiv`_ 属性を調べることでエンコーディングの自動検出サポートを追加"
"します。 :attr:`TextResponse.encoding` 参照。"

#: ../../topics/request-response.rst:954
msgid "XmlResponse objects"
msgstr "XmlResponseオブジェクト"

#: ../../topics/request-response.rst:958
msgid ""
"The :class:`XmlResponse` class is a subclass of :class:`TextResponse` which "
"adds encoding auto-discovering support by looking into the XML declaration "
"line.  See :attr:`TextResponse.encoding`."
msgstr ""
":class:`XmlResponse` クラスは :class:`TextResponse` のサブクラスで、XML宣言行"
"を調べることでエンコーディングの自動検出サポートを追加します。 :attr:"
"`TextResponse.encoding` 参照。"
