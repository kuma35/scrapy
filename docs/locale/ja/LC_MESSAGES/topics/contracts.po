# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Scrapy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-10 01:26+0900\n"
"PO-Revision-Date: 2021-06-29 23:05+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0\n"
"Generated-By: Babel 2.7.0\n"

#: ../../topics/contracts.rst:5
msgid "Spiders Contracts"
msgstr "スパイダー規約(contract)"

#: ../../topics/contracts.rst:7
msgid ""
"Testing spiders can get particularly annoying and while nothing prevents you "
"from writing unit tests the task gets cumbersome quickly. Scrapy offers an "
"integrated way of testing your spiders by the means of contracts."
msgstr "スパイダーのテストは特にウンコで、単体テストを書くのは楽チンだけど、テスト作業はマンドクサ。Scrapyは規約(contract)によってスパイダーを統一的にテストする方法を提供します。"

#: ../../topics/contracts.rst:11
msgid ""
"This allows you to test each callback of your spider by hardcoding a sample "
"url and check various constraints for how the callback processes the "
"response. Each contract is prefixed with an ``@`` and included in the "
"docstring. See the following example::"
msgstr "これにより、サンプルURLをハード・コーディングしてスパイダーの各コールバックをテストし、コールバックがレスポンスを処理する方法のさまざまな制約を確認できます。各規約はdocstringに含め、各規約の先頭には ``@`` が付けられています。次の例をご覧ください::"

#: ../../topics/contracts.rst:26
msgid "This callback is tested using three built-in contracts:"
msgstr "このコールバックは、3つの組み込み規約を使用してテストされます:"

#: ../../topics/contracts.rst:32
msgid ""
"This contract (``@url``) sets the sample URL used when checking other "
"contract conditions for this spider. This contract is mandatory. All "
"callbacks lacking this contract are ignored when running the checks::"
msgstr "この規約(``@url``)は、このスパイダーの他の規約条件をチェックするときに使用されるサンプルURLを設定します。 この規約は必須です。 チェックを実行する場合、この規約がないコールバックはすべて無視されます::"

#: ../../topics/contracts.rst:40
msgid ""
"This contract (``@cb_kwargs``) sets the :attr:`cb_kwargs <scrapy.http."
"Request.cb_kwargs>` attribute for the sample request. It must be a valid "
"JSON dictionary. ::"
msgstr "この規約(``@cb_kwargs``)は、サンプル・リクエストの :attr:`cb_kwargs <scrapy.http.Request.cb_kwargs>` 属性を設定します。 有効なJSON辞書である必要があります::"

#: ../../topics/contracts.rst:48
msgid ""
"This contract (``@returns``) sets lower and upper bounds for the items and "
"requests returned by the spider. The upper bound is optional::"
msgstr "この規約(``@returns``)は、スパイダーによって返されるアイテムとリクエストの下限と上限を設定します。 上限はオプションです::"

#: ../../topics/contracts.rst:55
msgid ""
"This contract (``@scrapes``) checks that all the items returned by the "
"callback have the specified fields::"
msgstr "この規約(``@scrapes``)は、コールバックによって返されたすべてのアイテムに指定されたフィールドがあることを確認します::"

#: ../../topics/contracts.rst:60
msgid "Use the :command:`check` command to run the contract checks."
msgstr ":command:`check` コマンドを使用して、規約チェックを実行します。"

#: ../../topics/contracts.rst:63
msgid "Custom Contracts"
msgstr "カスタム規約"

#: ../../topics/contracts.rst:65
msgid ""
"If you find you need more power than the built-in Scrapy contracts you can "
"create and load your own contracts in the project by using the :setting:"
"`SPIDER_CONTRACTS` setting::"
msgstr "うぬはチカラが欲しくないか？ 組み込みScrapy規約よりも多くのチカラを。その場合は、 :setting:`SPIDER_CONTRACTS` 設定を使用して、プロジェクトに独自の規約を作成してロードできます::"

#: ../../topics/contracts.rst:74
msgid ""
"Each contract must inherit from :class:`~scrapy.contracts.Contract` and can "
"override three methods:"
msgstr "各規約は :class:`~scrapy.contracts.Contract` から継承する必要があり、3つのメソッドをオーバーライドできます:"

#: ../../topics/contracts.rst:0
msgid "Parameters"
msgstr "パラメーター"

#: ../../topics/contracts.rst:81
msgid "callback function to which the contract is associated"
msgstr "規約が関連付けられているコールバック関数"

#: ../../topics/contracts.rst:84
msgid "list of arguments passed into the docstring (whitespace separated)"
msgstr "docstringに渡される引数のリスト(空白区切り)"

#: ../../topics/contracts.rst:90
msgid ""
"This receives a ``dict`` as an argument containing default arguments for "
"request object. :class:`~scrapy.http.Request` is used by default, but this "
"can be changed with the ``request_cls`` attribute. If multiple contracts in "
"chain have this attribute defined, the last one is used."
msgstr "これは、リクエスト・オブジェクトのデフォルト引数を含む引数として ``dict`` を受け取ります。 :class:`~scrapy.http.Request` はデフォルトで使用されますが、これは ``request_cls`` 属性で変更できます。 チェーン内の複数の規約にこの属性が定義されている場合、最後の規約が使用されます。"

#: ../../topics/contracts.rst:95
msgid "Must return the same or a modified version of it."
msgstr "同じまたは変更されたバージョンを返す必要があります。"

#: ../../topics/contracts.rst:99
msgid ""
"This allows hooking in various checks on the response received from the "
"sample request, before it's being passed to the callback."
msgstr "これにより、コールバックに渡される前に、サンプル・リクエストから受信したレスポンスのさまざまなチェックをフックすることを許します。"

#: ../../topics/contracts.rst:104
msgid ""
"This allows processing the output of the callback. Iterators are converted "
"listified before being passed to this hook."
msgstr "これにより、コールバックの出力を処理できます。 反復可能オブジェクトは、このフックに渡される前に変換されてリスト化されます。"

#: ../../topics/contracts.rst:107
msgid ""
"Raise :class:`~scrapy.exceptions.ContractFail` from :class:`~scrapy."
"contracts.Contract.pre_process` or :class:`~scrapy.contracts.Contract."
"post_process` if expectations are not met:"
msgstr ""
"期待どおりで無い場合、 :class:`~scrapy.contracts.Contract.pre_process` また"
"は :class:`~scrapy.contracts.Contract.post_process` から :class:`~scrapy."
"exceptions.ContractFail` 例外が送出されます。"

#: ../../../scrapy/exceptions.py:docstring of scrapy.exceptions.ContractFail:1
msgid "Error raised in case of a failing contract"
msgstr "規約が失敗した場合に発生するエラー"

#: ../../topics/contracts.rst:113
msgid ""
"Here is a demo contract which checks the presence of a custom header in the "
"response received::"
msgstr "以下に、受信したレスポンスのカスタム・ヘッダーの存在を確認するデモ規約を示します::"

#: ../../topics/contracts.rst:134
msgid "Detecting check runs"
msgstr "``scrapy check`` 実行の検出"

#: ../../topics/contracts.rst:136
msgid ""
"When ``scrapy check`` is running, the ``SCRAPY_CHECK`` environment variable "
"is set to the ``true`` string. You can use :data:`os.environ` to perform any "
"change to your spiders or your settings when ``scrapy check`` is used::"
msgstr "``scrapy check`` が実行されているとき、 ``SCRAPY_CHECK`` 環境変数を ``true`` 文字列に設定します。 ``scrapy check`` が使用されている場合、 :data:`os.environ` を使用して、スパイダーや設定に変更を加えることができます::"
